{"remainingRequest":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/src/components/CrawlersList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/src/components/CrawlersList.vue","mtime":1631409986612},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7bWFwQWN0aW9ucyxtYXBHZXR0ZXJzfSBmcm9tICJ2dWV4IgogIGV4cG9ydCBkZWZhdWx0IHsKCiAgICBuYW1lOiAnQ3Jhd2xlcnNMaXN0JywKICAgIAogICAgZGF0YSAoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgc2VhcmNoOiAnJywKICAgICAgICBpblByb2Nlc3M6IHRydWUsCiAgICAgICAgc3RhcnRMb25nUG9sbGluZzpmYWxzZSwKICAgICAgICBwb2xsaW5nOiBudWxsLAogICAgICAgIHN0b3BwaW5nQ3Jhd2xlcjogZmFsc2UsCiAgICAgICAgY3Jhd2xlckluUHJvY2Vzczp7CiAgICAgICAgICBwcm9qZWN0OiAnZGVmYXVsdCcsCiAgICAgICAgICBqb2I6ICcnCiAgICAgICAgfSwKICAgICAgICBoZWFkZXJzOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgIHRleHQ6ICdDcmF3bGVyIE5hbWUnLAogICAgICAgICAgICBhbGlnbjogJ3N0YXJ0JywKICAgICAgICAgICAgdmFsdWU6ICduYW1lJywKICAgICAgICAgIH0sCiAgICAgICAgICB7IHRleHQ6ICdTdGFydCBVUkwnLCB2YWx1ZTogJ3N0YXJ0X3VybCcsIHNvcnRhYmxlOiBmYWxzZSB9LAogICAgICAgICAgeyB0ZXh0OiAnU3RhdGUnLCB2YWx1ZTogJ3N0YXRlJywgc29ydGFibGU6IGZhbHNlIH0sCiAgICAgICAgICB7IHRleHQ6ICdVbmlxdWUgSUQnLCB2YWx1ZTogJ3Rhc2tfaWQnLCBzb3J0YWJsZTogZmFsc2V9LAogICAgICAgICAgeyB0ZXh0OiAnICcsIHZhbHVlOiAnYnRuX3J1bl9zdG9wJywgc29ydGFibGU6IGZhbHNlIH0sCiAgICAgICAgICB7IHRleHQ6ICcgJywgdmFsdWU6ICdidG5fZGVsZXRlJywgc29ydGFibGU6IGZhbHNlIH0sCiAgICAgICAgXSwKICAgICAgICAvLyBjcmF3bGVyc19kYXRhOiBnZXRDcmF3bGVycwogICAgICB9CiAgICB9LAoKICAgIG1vdW50ZWQgKCkgewogICAgICB0aGlzLmdldENyYXdsZXJzRGF0YSgpOwogICAgfSwKCiAgICB3YXRjaDogewogICAgICBnZXRGdWxsUGF0aCAoKSB7CiAgICAgICAgdGhpcy5nZXRDcmF3bGVyc0RhdGEoKQogICAgICB9LAoKICAgICAgLy8gc3RhcnRMb25nUG9sbGluZyAoKSB7CiAgICAgIC8vICAgY29uc29sZS5sb2coIkxvbmdQb2xsaW5nIikKICAgICAgLy8gICB0aGlzLnBvbGxpbmdGcmVzaENyYXdsZXJzSW5mbygpCiAgICAgIC8vIH0sCgogICAgICBnZXRKb2JTdGF0ZShuZXdWYWwsIG9sZFZhbCl7CiAgICAgICAgICBjb25zb2xlLmxvZygiT0xEOiAiK29sZFZhbCkKICAgICAgICAgIGNvbnNvbGUubG9nKCJORVc6ICIrbmV3VmFsKQogICAgICAgICAgY29uc29sZS5sb2coIlBPTExJTkchISEhISEhISIpCiAgICAgICAgICB0aGlzLnBvbGxpbmdGcmVzaENyYXdsZXJzSW5mbygpCiAgICAgIH0KCiAgICB9LAoKICAgIGNvbXB1dGVkOiB7CiAgICAgIC4uLm1hcEdldHRlcnMoIkF1dGgiLFsiaXNBdXRoIl0pLAogICAgICAuLi5tYXBHZXR0ZXJzKCJDcmF3bGVyIixbImdldENyYXdsZXJzIl0pLAogICAgICAuLi5tYXBHZXR0ZXJzKCJDcmF3bGVyIixbImlzTG9hZGluZyJdKSwKICAgICAgLi4ubWFwR2V0dGVycygiQ3Jhd2xlciIsWyJnZXRMb2FkaW5nUnVubmluZ0NyYXdsZXJFeGVjdXRpb24iXSksCiAgICAgIC4uLm1hcEdldHRlcnMoIkNyYXdsZXIiLFsiZ2V0UnVubmluZ0NyYXdsZXIiXSksCiAgICAgIC4uLm1hcEdldHRlcnMoIkNyYXdsZXIiLFsiZ2V0UnVubmluZ0NyYXdsZXJUYXNrSWQiXSksCiAgICAgIC4uLm1hcEdldHRlcnMoIkNyYXdsZXIiLFsiZ2V0Sm9iIl0pLAogICAgICAuLi5tYXBHZXR0ZXJzKCJDcmF3bGVyIixbImdldEZpbmlzaGVkSm9icyJdKSwKICAgICAgLi4ubWFwR2V0dGVycygiQ3Jhd2xlciIsWyJnZXRKb2JTdGF0ZSJdKSwKICAgICAgCgogICAgICBnZXRGdWxsUGF0aCAoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHJvdXRlLnBhdGgKICAgICAgfSwKCiAgICAgIC8vIGFjdGl2YXRlTG9uZ1BvbGxpbmcoKXsKICAgICAgLy8gICBjb25zb2xlLmxvZyh0aGlzLmdldEpvYlN0YXRlKQogICAgICAvLyAgIHJldHVybiB0aGlzLnN0YXJ0TG9uZ1BvbGxpbmcgJiYgdGhpcy5nZXRKb2JTdGF0ZSAhPSAnZmluaXNoZWQnCiAgICAgIC8vIH0KCiAgICAgIAoKICAgICAgCiAgICB9LAoKICAgIG1ldGhvZHM6ewogICAgICAgIC4uLm1hcEFjdGlvbnMoJ0NyYXdsZXInLFsnZ2V0QWxsQ3Jhd2xlcnMnXSksCiAgICAgICAgLi4ubWFwQWN0aW9ucygnQ3Jhd2xlcicsWydydW5DcmF3bGVyJ10pLAogICAgICAgIC4uLm1hcEFjdGlvbnMoJ0NyYXdsZXInLFsnZ2V0Sm9icyddKSwKICAgICAgICAuLi5tYXBBY3Rpb25zKCdDcmF3bGVyJyxbJ2NhbmNlbFJ1bm5pbmdKb2InXSksCiAgICAgICAgLi4ubWFwQWN0aW9ucygnQ3Jhd2xlcicsWydnZXRSdW5pbmdKb2JzJ10pLAoKICAgICAgICBnZXRDcmF3bGVyc0RhdGEoKXsKICAgICAgICAgIHRoaXMuZ2V0QWxsQ3Jhd2xlcnModGhpcy5jcmF3bGVySW5Qcm9jZXNzKQogICAgICAgIH0sCgoKICAgICAgICBleGVjdXRlQ3Jhd2xlcihpZCl7CiAgICAgICAgICBsZXQgcGxheWxvYWQgPSB7J2lkJzogaWQsICdmb3JtJzogdGhpcy5jcmF3bGVySW5Qcm9jZXNzfQogICAgICAgICAgY29uc29sZS5sb2cocGxheWxvYWQpCiAgICAgICAgICB0aGlzLnJ1bkNyYXdsZXIocGxheWxvYWQpCiAgICAgICAgICB0aGlzLnN0YXJ0TG9uZ1BvbGxpbmc9dHJ1ZQogICAgICAgICAgLy8gdGhpcy5wb2xsaW5nRnJlc2hDcmF3bGVyc0luZm8oKQogICAgICAgIH0sCgogICAgICAgIGV4aXRSdW5uaW5nSm9iKHRhc2tJZCl7CiAgICAgICAgICB0aGlzLmNyYXdsZXJJblByb2Nlc3NbJ2pvYiddID0gdGFza0lkCiAgICAgICAgICB0aGlzLnN0b3BwaW5nQ3Jhd2xlciA9IHRydWUKICAgICAgICAgIHRoaXMuY2FuY2VsUnVubmluZ0pvYih0aGlzLmNyYXdsZXJJblByb2Nlc3MpCiAgICAgICAgICB0aGlzLmluUHJvY2VzcyA9IGZhbHNlCiAgICAgICAgICB0aGlzLmdldEFsbENyYXdsZXJzKHRoaXMuY3Jhd2xlckluUHJvY2VzcykKICAgICAgICB9LAoKICAgICAgICBnZXRDcmF3bGVySW5mbyAodGFza19pZCl7CiAgICAgICAgICBsZXQgam9icyA9IHRoaXMuZ2V0Sm9iCiAgICAgICAgICBsZXQgZmluaXNoZWRfam9icyA9IHRoaXMuZ2V0RmluaXNoZWRKb2JzCiAgICAgICAgICBsZXQgY3Jhd2xlciA9IG51bGwKICAgICAgICAgIGlmKGpvYnMubGVuZ3RoID4gMCl7CiAgICAgICAgICAgICAgY3Jhd2xlciA9IGpvYnMuZmluZChvID0+IG8uaWQgPT09IHRhc2tfaWQpOwogICAgICAgICAgICAgIGlmKGNyYXdsZXIgPT0gbnVsbCAmJiBmaW5pc2hlZF9qb2JzLmxlbmd0aCA+IDApewogICAgICAgICAgICAgICAgICBjcmF3bGVyID0gZmluaXNoZWRfam9icy5maW5kKG8gPT4gby5pZCA9PT0gdGFza19pZCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZWxzZSBpZihmaW5pc2hlZF9qb2JzLmxlbmd0aCA+IDApewogICAgICAgICAgICAgIGNyYXdsZXIgPSBmaW5pc2hlZF9qb2JzLmZpbmQobyA9PiBvLmlkID09PSB0YXNrX2lkKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gY3Jhd2xlcgogICAgICAgIH0sCgogICAgICAgIGNyYXdsZXJCdXR0b25Db250cm9sU3dpdGNoKHRhc2tfaWQpewogICAgICAgICAgbGV0IGlzQWN0aXZlID0gdGhpcy5nZXRDcmF3bGVySW5mbyh0YXNrX2lkKSA/IHRoaXMuZ2V0Q3Jhd2xlckluZm8odGFza19pZCkuaXNBY3RpdmUgOiBmYWxzZQogICAgICAgICAgCiAgICAgICAgICByZXR1cm4gaXNBY3RpdmUKICAgICAgICB9LAoKICAgICAgICBwb2xsaW5nRnJlc2hDcmF3bGVyc0luZm8oKXsKICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuYWN0aXZhdGVMb25nUG9sbGluZykKICAgICAgICAgICAgdmFyIGludGVydmFsID0gc2V0SW50ZXJ2YWwoCiAgICAgICAgICAgICAgZnVuY3Rpb24gKCkgeyAKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJMb25nUG9sbGluZy0tLT4iK3RoaXMuZ2V0Sm9iU3RhdGUpCiAgICAgICAgICAgICAgICB0aGlzLmdldEFsbENyYXdsZXJzKHRoaXMuY3Jhd2xlckluUHJvY2VzcykKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdpbnRlcnZhbC0tLT4nKyB0aGlzLmlzQXV0aCkKICAgICAgICAgICAgICAgIC8vIHRoaXMuJHN0b3JlLmNvbW1pdCgnQ3Jhd2xlci9TRVRfUE9MTElOR19JTlRFUlZBTCcsIGludGVydmFsKQogICAgICAgICAgICAgICAgaWYodGhpcy5nZXRKb2JTdGF0ZSA9PSAnZmluaXNoZWQnIHx8ICF0aGlzLmlzQXV0aCl7CiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJTVE9QIFBPTExJTkchISIpCiAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpOwogICAgICAgICAgICAgICAgICB0aGlzLnN0b3BwaW5nQ3Jhd2xlciA9IGZhbHNlCiAgICAgICAgICAgICAgICAgIC8vIGNsZWFySW50ZXJ2YWwodGhpcy4kc3RvcmUuZ2V0dGVyc1snQ3Jhd2xlci9nZXRQb2xsaW5nSW50ZXJ2YWwnXSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgLmJpbmQodGhpcyksIDMwMDApCiAgICAgICAgICAgIC8vIHRoaXMucG9sbGluZyA9IGludGVydmFsCiAgICAgICAgfQoKICAgIH0sCgogICAgLy8gYmVmb3JlRGVzdHJveSAoKSB7CiAgICAvLyAgIGNsZWFySW50ZXJ2YWwodGhpcy5wb2xsaW5nKQogICAgLy8gfSwKCiAgICBjcmVhdGVkICgpIHsKICAgICAgaWYodGhpcy5nZXRKb2JTdGF0ZSAhPSAnZmluaXNoZWQnKXsKICAgICAgICBjb25zb2xlLmxvZygiY3JlYXRlZD09PT4iKQogICAgICAgIHRoaXMucG9sbGluZ0ZyZXNoQ3Jhd2xlcnNJbmZvKCkKICAgICAgfQogICAgfQogICAgCiAgfQo="},{"version":3,"sources":["CrawlersList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+JA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"CrawlersList.vue","sourceRoot":"src/components","sourcesContent":["<template>\n   <v-app id=\"inspire\">\n      <v-main>\n        <v-card>\n          <v-card-title>\n            Crawlers List {{this.polling}}\n            <!-- {{getRunningCrawlerTaskId['task_id']}} -->\n            <v-spacer></v-spacer>\n            <v-text-field\n              v-model=\"search\"\n              append-icon=\"mdi-magnify\"\n              label=\"Search\"\n              single-line\n              hide-details\n            ></v-text-field>\n          </v-card-title>\n          <v-data-table\n            :headers=\"headers\"\n            :items=\"getCrawlers\"\n            :search=\"search\"\n            class=\"elevation-1\"\n            :loading=\"isLoading\"\n            loading-text=\"Loading... Please wait\">\n            <template v-slot:item.name=\"{ item }\">\n              <b>{{item.name}}</b>\n            </template>\n            <template v-slot:item.start_url=\"{ item }\">\n              <a :href=\"item.start_url\" target=\"_blank\">{{item.start_url}}</a>\n            </template>\n            <template v-slot:item.state=\"{ item }\">\n                <span v-if=\"getCrawlerInfo(item.task_id) != null && crawlerButtonControlSwitch(item.task_id) \">\n                  <!-- {{ getJobState }} -->\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    v-if=\"getJobState == 'pending'\"\n                  >\n                  <v-icon left small>\n                    mdi-cog-sync\n                  </v-icon>\n                    {{getJobState}}\n                  </v-chip>\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"red\"\n                    text-color=\"white\"\n                    v-else-if=\"getJobState == 'running'\"\n                  >\n                    <span style=\"margin: 3px\">\n                      <i  class=\"fas fa-cog fa-spin\" style=\"color:white\"></i>\n                    </span>\n                      {{getJobState}}\n                  </v-chip>\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"green\"\n                    text-color=\"white\"\n                    v-else-if=\"getJobState == 'finished'\"\n                  >\n                  <v-icon left small>\n                    mdi-check-all\n                  </v-icon>\n                  {{getJobState}}\n                  </v-chip>\n                </span>\n                <span v-else-if=\"getCrawlerInfo(item.task_id) != null\">\n                  <!-- {{getCrawlerInfo(item.task_id).state}} -->\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    v-if=\"getCrawlerInfo(item.task_id).state == 'pending'\"\n                  >\n                    {{getCrawlerInfo(item.task_id).state}}\n                  </v-chip>\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"red\"\n                    text-color=\"white\"\n                    v-else-if=\"getCrawlerInfo(item.task_id).state == 'running'\"\n                  >\n                    <span style=\"margin: 3px\">\n                      <i class=\"fas fa-cog fa-spin\" style=\"color:white\"></i>\n                    </span>\n                    {{getCrawlerInfo(item.task_id).state}}\n                  </v-chip>\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"green\"\n                    text-color=\"white\"\n                    v-else-if=\"getCrawlerInfo(item.task_id).state == 'finished'\"\n                  >\n                  <v-icon left small>\n                    mdi-check-all\n                  </v-icon>\n                  {{getCrawlerInfo(item.task_id).state}}\n                  </v-chip>\n                </span>\n                <span v-else><v-icon small>mdi-check-outline</v-icon></span>\n            </template>\n            <template v-slot:item.task_id=\"{ item }\">\n                <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"green\"\n                    text-color=\"white\"\n                    v-if=\"item.task_id == 'New Crawler'\"\n                  >\n                  <v-icon left small>\n                    mdi-check-all\n                  </v-icon>\n                  item.task_id\n                  </v-chip>\n                  <span v-else>{{item.task_id}}</span>\n            </template>\n              <template v-slot:item.btn_run_stop=\"{ item }\">\n                <v-btn\n                  icon\n                  v-if=\"crawlerButtonControlSwitch(item.task_id) && getJobState != 'finished'\"\n                  :disabled=\"getLoadingRunningCrawlerExecution || stoppingCrawler\"\n                  v-on:click=\"exitRunningJob(item.task_id)\"\n                  color=\"black\">\n                  <v-icon>mdi-close-circle-outline</v-icon>\n                </v-btn>\n                <v-btn\n                  icon\n                  v-else\n                  :disabled=\"getLoadingRunningCrawlerExecution || getJobState != 'finished' || stoppingCrawler\"\n                  v-on:click=\"executeCrawler(item.crawlerId)\"\n                  color=\"black\">\n                  <v-icon>mdi-play</v-icon>\n                </v-btn>\n                <!-- <span>{{item.crawlerId}}</span> -->\n              </template>\n              <template v-slot:item.btn_delete=\"{ item }\">\n                <v-btn\n                  icon\n                  :disabled=\"getLoadingRunningCrawlerExecution || getJobState != 'finished'\"\n                  color=\"black\">\n                  <v-icon>mdi-delete</v-icon>\n                </v-btn>\n              </template>\n            </v-data-table>\n        </v-card>\n        <v-overlay :value=\"stoppingCrawler\">\n          <v-progress-circular\n            indeterminate\n            size=\"64\"\n          ></v-progress-circular>\n        </v-overlay>\n      </v-main>\n   </v-app>\n</template>\n\n\n<script>\nimport {mapActions,mapGetters} from \"vuex\"\n  export default {\n\n    name: 'CrawlersList',\n    \n    data () {\n      return {\n        search: '',\n        inProcess: true,\n        startLongPolling:false,\n        polling: null,\n        stoppingCrawler: false,\n        crawlerInProcess:{\n          project: 'default',\n          job: ''\n        },\n        headers: [\n          {\n            text: 'Crawler Name',\n            align: 'start',\n            value: 'name',\n          },\n          { text: 'Start URL', value: 'start_url', sortable: false },\n          { text: 'State', value: 'state', sortable: false },\n          { text: 'Unique ID', value: 'task_id', sortable: false},\n          { text: ' ', value: 'btn_run_stop', sortable: false },\n          { text: ' ', value: 'btn_delete', sortable: false },\n        ],\n        // crawlers_data: getCrawlers\n      }\n    },\n\n    mounted () {\n      this.getCrawlersData();\n    },\n\n    watch: {\n      getFullPath () {\n        this.getCrawlersData()\n      },\n\n      // startLongPolling () {\n      //   console.log(\"LongPolling\")\n      //   this.pollingFreshCrawlersInfo()\n      // },\n\n      getJobState(newVal, oldVal){\n          console.log(\"OLD: \"+oldVal)\n          console.log(\"NEW: \"+newVal)\n          console.log(\"POLLING!!!!!!!!\")\n          this.pollingFreshCrawlersInfo()\n      }\n\n    },\n\n    computed: {\n      ...mapGetters(\"Auth\",[\"isAuth\"]),\n      ...mapGetters(\"Crawler\",[\"getCrawlers\"]),\n      ...mapGetters(\"Crawler\",[\"isLoading\"]),\n      ...mapGetters(\"Crawler\",[\"getLoadingRunningCrawlerExecution\"]),\n      ...mapGetters(\"Crawler\",[\"getRunningCrawler\"]),\n      ...mapGetters(\"Crawler\",[\"getRunningCrawlerTaskId\"]),\n      ...mapGetters(\"Crawler\",[\"getJob\"]),\n      ...mapGetters(\"Crawler\",[\"getFinishedJobs\"]),\n      ...mapGetters(\"Crawler\",[\"getJobState\"]),\n      \n\n      getFullPath () {\n        return this.$route.path\n      },\n\n      // activateLongPolling(){\n      //   console.log(this.getJobState)\n      //   return this.startLongPolling && this.getJobState != 'finished'\n      // }\n\n      \n\n      \n    },\n\n    methods:{\n        ...mapActions('Crawler',['getAllCrawlers']),\n        ...mapActions('Crawler',['runCrawler']),\n        ...mapActions('Crawler',['getJobs']),\n        ...mapActions('Crawler',['cancelRunningJob']),\n        ...mapActions('Crawler',['getRuningJobs']),\n\n        getCrawlersData(){\n          this.getAllCrawlers(this.crawlerInProcess)\n        },\n\n\n        executeCrawler(id){\n          let playload = {'id': id, 'form': this.crawlerInProcess}\n          console.log(playload)\n          this.runCrawler(playload)\n          this.startLongPolling=true\n          // this.pollingFreshCrawlersInfo()\n        },\n\n        exitRunningJob(taskId){\n          this.crawlerInProcess['job'] = taskId\n          this.stoppingCrawler = true\n          this.cancelRunningJob(this.crawlerInProcess)\n          this.inProcess = false\n          this.getAllCrawlers(this.crawlerInProcess)\n        },\n\n        getCrawlerInfo (task_id){\n          let jobs = this.getJob\n          let finished_jobs = this.getFinishedJobs\n          let crawler = null\n          if(jobs.length > 0){\n              crawler = jobs.find(o => o.id === task_id);\n              if(crawler == null && finished_jobs.length > 0){\n                  crawler = finished_jobs.find(o => o.id === task_id);\n              }\n          }\n          else if(finished_jobs.length > 0){\n              crawler = finished_jobs.find(o => o.id === task_id);\n          }\n\n          return crawler\n        },\n\n        crawlerButtonControlSwitch(task_id){\n          let isActive = this.getCrawlerInfo(task_id) ? this.getCrawlerInfo(task_id).isActive : false\n          \n          return isActive\n        },\n\n        pollingFreshCrawlersInfo(){\n          // console.log(this.activateLongPolling)\n            var interval = setInterval(\n              function () { \n                console.log(\"LongPolling--->\"+this.getJobState)\n                this.getAllCrawlers(this.crawlerInProcess)\n                console.log('interval--->'+ this.isAuth)\n                // this.$store.commit('Crawler/SET_POLLING_INTERVAL', interval)\n                if(this.getJobState == 'finished' || !this.isAuth){\n                  console.log(\"STOP POLLING!!\")\n                  clearInterval(interval);\n                  this.stoppingCrawler = false\n                  // clearInterval(this.$store.getters['Crawler/getPollingInterval'])\n                }\n              }\n              .bind(this), 3000)\n            // this.polling = interval\n        }\n\n    },\n\n    // beforeDestroy () {\n    //   clearInterval(this.polling)\n    // },\n\n    created () {\n      if(this.getJobState != 'finished'){\n        console.log(\"created===>\")\n        this.pollingFreshCrawlersInfo()\n      }\n    }\n    \n  }\n</script>\n"]}]}