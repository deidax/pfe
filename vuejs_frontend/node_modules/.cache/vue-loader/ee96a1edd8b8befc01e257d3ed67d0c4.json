{"remainingRequest":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/src/components/CrawlersList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/src/components/CrawlersList.vue","mtime":1631404475755},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7bWFwQWN0aW9ucyxtYXBHZXR0ZXJzfSBmcm9tICJ2dWV4IgogIGV4cG9ydCBkZWZhdWx0IHsKCiAgICBuYW1lOiAnQ3Jhd2xlcnNMaXN0JywKICAgIAogICAgZGF0YSAoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgc2VhcmNoOiAnJywKICAgICAgICBpblByb2Nlc3M6IHRydWUsCiAgICAgICAgc3RhcnRMb25nUG9sbGluZzpmYWxzZSwKICAgICAgICBwb2xsaW5nOiBudWxsLAogICAgICAgIGNyYXdsZXJJblByb2Nlc3M6ewogICAgICAgICAgcHJvamVjdDogJ2RlZmF1bHQnLAogICAgICAgICAgam9iOiAnJwogICAgICAgIH0sCiAgICAgICAgaGVhZGVyczogWwogICAgICAgICAgewogICAgICAgICAgICB0ZXh0OiAnQ3Jhd2xlciBOYW1lJywKICAgICAgICAgICAgYWxpZ246ICdzdGFydCcsCiAgICAgICAgICAgIHZhbHVlOiAnbmFtZScsCiAgICAgICAgICB9LAogICAgICAgICAgeyB0ZXh0OiAnU3RhcnQgVVJMJywgdmFsdWU6ICdzdGFydF91cmwnLCBzb3J0YWJsZTogZmFsc2UgfSwKICAgICAgICAgIHsgdGV4dDogJ1N0YXRlJywgdmFsdWU6ICdzdGF0ZScsIHNvcnRhYmxlOiBmYWxzZSB9LAogICAgICAgICAgeyB0ZXh0OiAnVW5pcXVlIElEJywgdmFsdWU6ICd0YXNrX2lkJywgc29ydGFibGU6IGZhbHNlfSwKICAgICAgICAgIHsgdGV4dDogJyAnLCB2YWx1ZTogJ2J0bl9ydW5fc3RvcCcsIHNvcnRhYmxlOiBmYWxzZSB9LAogICAgICAgICAgeyB0ZXh0OiAnICcsIHZhbHVlOiAnYnRuX2RlbGV0ZScsIHNvcnRhYmxlOiBmYWxzZSB9LAogICAgICAgIF0sCiAgICAgICAgLy8gY3Jhd2xlcnNfZGF0YTogZ2V0Q3Jhd2xlcnMKICAgICAgfQogICAgfSwKCiAgICBtb3VudGVkICgpIHsKICAgICAgdGhpcy5nZXRDcmF3bGVyc0RhdGEoKTsKICAgIH0sCgogICAgd2F0Y2g6IHsKICAgICAgZ2V0RnVsbFBhdGggKCkgewogICAgICAgIHRoaXMuZ2V0Q3Jhd2xlcnNEYXRhKCkKICAgICAgfSwKCiAgICAgIC8vIHN0YXJ0TG9uZ1BvbGxpbmcgKCkgewogICAgICAvLyAgIGNvbnNvbGUubG9nKCJMb25nUG9sbGluZyIpCiAgICAgIC8vICAgdGhpcy5wb2xsaW5nRnJlc2hDcmF3bGVyc0luZm8oKQogICAgICAvLyB9LAoKICAgICAgZ2V0Sm9iU3RhdGUobmV3VmFsLCBvbGRWYWwpewogICAgICAgICAgY29uc29sZS5sb2coIk9MRDogIitvbGRWYWwpCiAgICAgICAgICBjb25zb2xlLmxvZygiTkVXOiAiK25ld1ZhbCkKICAgICAgICAgIGNvbnNvbGUubG9nKCJQT0xMSU5HISEhISEhISEiKQogICAgICAgICAgdGhpcy5wb2xsaW5nRnJlc2hDcmF3bGVyc0luZm8oKQogICAgICB9CgogICAgfSwKCiAgICBjb21wdXRlZDogewogICAgICAuLi5tYXBHZXR0ZXJzKCJBdXRoIixbImlzQXV0aCJdKSwKICAgICAgLi4ubWFwR2V0dGVycygiQ3Jhd2xlciIsWyJnZXRDcmF3bGVycyJdKSwKICAgICAgLi4ubWFwR2V0dGVycygiQ3Jhd2xlciIsWyJpc0xvYWRpbmciXSksCiAgICAgIC4uLm1hcEdldHRlcnMoIkNyYXdsZXIiLFsiZ2V0TG9hZGluZ1J1bm5pbmdDcmF3bGVyRXhlY3V0aW9uIl0pLAogICAgICAuLi5tYXBHZXR0ZXJzKCJDcmF3bGVyIixbImdldFJ1bm5pbmdDcmF3bGVyIl0pLAogICAgICAuLi5tYXBHZXR0ZXJzKCJDcmF3bGVyIixbImdldFJ1bm5pbmdDcmF3bGVyVGFza0lkIl0pLAogICAgICAuLi5tYXBHZXR0ZXJzKCJDcmF3bGVyIixbImdldEpvYiJdKSwKICAgICAgLi4ubWFwR2V0dGVycygiQ3Jhd2xlciIsWyJnZXRGaW5pc2hlZEpvYnMiXSksCiAgICAgIC4uLm1hcEdldHRlcnMoIkNyYXdsZXIiLFsiZ2V0Sm9iU3RhdGUiXSksCgogICAgICBnZXRGdWxsUGF0aCAoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHJvdXRlLnBhdGgKICAgICAgfSwKCiAgICAgIC8vIGFjdGl2YXRlTG9uZ1BvbGxpbmcoKXsKICAgICAgLy8gICBjb25zb2xlLmxvZyh0aGlzLmdldEpvYlN0YXRlKQogICAgICAvLyAgIHJldHVybiB0aGlzLnN0YXJ0TG9uZ1BvbGxpbmcgJiYgdGhpcy5nZXRKb2JTdGF0ZSAhPSAnZmluaXNoZWQnCiAgICAgIC8vIH0KCiAgICAgIAoKICAgICAgCiAgICB9LAoKICAgIG1ldGhvZHM6ewogICAgICAgIC4uLm1hcEFjdGlvbnMoJ0NyYXdsZXInLFsnZ2V0QWxsQ3Jhd2xlcnMnXSksCiAgICAgICAgLi4ubWFwQWN0aW9ucygnQ3Jhd2xlcicsWydydW5DcmF3bGVyJ10pLAogICAgICAgIC4uLm1hcEFjdGlvbnMoJ0NyYXdsZXInLFsnZ2V0Sm9icyddKSwKICAgICAgICAuLi5tYXBBY3Rpb25zKCdDcmF3bGVyJyxbJ2NhbmNlbFJ1bm5pbmdKb2InXSksCiAgICAgICAgLi4ubWFwQWN0aW9ucygnQ3Jhd2xlcicsWydnZXRSdW5pbmdKb2JzJ10pLAoKICAgICAgICBnZXRDcmF3bGVyc0RhdGEoKXsKICAgICAgICAgIHRoaXMuZ2V0QWxsQ3Jhd2xlcnModGhpcy5jcmF3bGVySW5Qcm9jZXNzKQogICAgICAgIH0sCgoKICAgICAgICBleGVjdXRlQ3Jhd2xlcihpZCl7CiAgICAgICAgICBsZXQgcGxheWxvYWQgPSB7J2lkJzogaWQsICdmb3JtJzogdGhpcy5jcmF3bGVySW5Qcm9jZXNzfQogICAgICAgICAgY29uc29sZS5sb2cocGxheWxvYWQpCiAgICAgICAgICB0aGlzLnJ1bkNyYXdsZXIocGxheWxvYWQpCiAgICAgICAgICB0aGlzLnN0YXJ0TG9uZ1BvbGxpbmc9dHJ1ZQogICAgICAgICAgLy8gdGhpcy5wb2xsaW5nRnJlc2hDcmF3bGVyc0luZm8oKQogICAgICAgIH0sCgogICAgICAgIGV4aXRSdW5uaW5nSm9iKHRhc2tJZCl7CiAgICAgICAgICB0aGlzLmNyYXdsZXJJblByb2Nlc3NbJ2pvYiddID0gdGFza0lkCiAgICAgICAgICB0aGlzLmNhbmNlbFJ1bm5pbmdKb2IodGhpcy5jcmF3bGVySW5Qcm9jZXNzKQogICAgICAgICAgdGhpcy5pblByb2Nlc3MgPSBmYWxzZQogICAgICAgICAgdGhpcy5nZXRBbGxDcmF3bGVycyh0aGlzLmNyYXdsZXJJblByb2Nlc3MpCiAgICAgICAgfSwKCiAgICAgICAgZ2V0Q3Jhd2xlckluZm8gKHRhc2tfaWQpewogICAgICAgICAgbGV0IGpvYnMgPSB0aGlzLmdldEpvYgogICAgICAgICAgbGV0IGZpbmlzaGVkX2pvYnMgPSB0aGlzLmdldEZpbmlzaGVkSm9icwogICAgICAgICAgbGV0IGNyYXdsZXIgPSBudWxsCiAgICAgICAgICBpZihqb2JzLmxlbmd0aCA+IDApewogICAgICAgICAgICAgIGNyYXdsZXIgPSBqb2JzLmZpbmQobyA9PiBvLmlkID09PSB0YXNrX2lkKTsKICAgICAgICAgICAgICBpZihjcmF3bGVyID09IG51bGwgJiYgZmluaXNoZWRfam9icy5sZW5ndGggPiAwKXsKICAgICAgICAgICAgICAgICAgY3Jhd2xlciA9IGZpbmlzaGVkX2pvYnMuZmluZChvID0+IG8uaWQgPT09IHRhc2tfaWQpOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgaWYoZmluaXNoZWRfam9icy5sZW5ndGggPiAwKXsKICAgICAgICAgICAgICBjcmF3bGVyID0gZmluaXNoZWRfam9icy5maW5kKG8gPT4gby5pZCA9PT0gdGFza19pZCk7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIGNyYXdsZXIKICAgICAgICB9LAoKICAgICAgICBjcmF3bGVyQnV0dG9uQ29udHJvbFN3aXRjaCh0YXNrX2lkKXsKICAgICAgICAgIGxldCBpc0FjdGl2ZSA9IHRoaXMuZ2V0Q3Jhd2xlckluZm8odGFza19pZCkgPyB0aGlzLmdldENyYXdsZXJJbmZvKHRhc2tfaWQpLmlzQWN0aXZlIDogZmFsc2UKICAgICAgICAgIAogICAgICAgICAgcmV0dXJuIGlzQWN0aXZlCiAgICAgICAgfSwKCiAgICAgICAgcG9sbGluZ0ZyZXNoQ3Jhd2xlcnNJbmZvKCl7CiAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmFjdGl2YXRlTG9uZ1BvbGxpbmcpCiAgICAgICAgICAgIHZhciBpbnRlcnZhbCA9IHNldEludGVydmFsKAogICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsgCiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiTG9uZ1BvbGxpbmctLS0+Iit0aGlzLmdldEpvYlN0YXRlKQogICAgICAgICAgICAgICAgdGhpcy5nZXRBbGxDcmF3bGVycyh0aGlzLmNyYXdsZXJJblByb2Nlc3MpCiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnaW50ZXJ2YWwtLS0+JysgdGhpcy5pc0F1dGgpCiAgICAgICAgICAgICAgICAvLyB0aGlzLiRzdG9yZS5jb21taXQoJ0NyYXdsZXIvU0VUX1BPTExJTkdfSU5URVJWQUwnLCBpbnRlcnZhbCkKICAgICAgICAgICAgICAgIGlmKHRoaXMuZ2V0Sm9iU3RhdGUgPT0gJ2ZpbmlzaGVkJyB8fCAhdGhpcy5pc0F1dGgpewogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiU1RPUCBQT0xMSU5HISEiKQogICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTsKICAgICAgICAgICAgICAgICAgLy8gY2xlYXJJbnRlcnZhbCh0aGlzLiRzdG9yZS5nZXR0ZXJzWydDcmF3bGVyL2dldFBvbGxpbmdJbnRlcnZhbCddKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAuYmluZCh0aGlzKSwgMzAwMCkKICAgICAgICAgICAgLy8gdGhpcy5wb2xsaW5nID0gaW50ZXJ2YWwKICAgICAgICB9CgogICAgfSwKCiAgICAvLyBiZWZvcmVEZXN0cm95ICgpIHsKICAgIC8vICAgY2xlYXJJbnRlcnZhbCh0aGlzLnBvbGxpbmcpCiAgICAvLyB9LAoKICAgIGNyZWF0ZWQgKCkgewogICAgICBpZih0aGlzLmdldEpvYlN0YXRlICE9ICdmaW5pc2hlZCcpewogICAgICAgIGNvbnNvbGUubG9nKCJjcmVhdGVkPT09PiIpCiAgICAgICAgdGhpcy5wb2xsaW5nRnJlc2hDcmF3bGVyc0luZm8oKQogICAgICB9CiAgICB9CiAgICAKICB9Cg=="},{"version":3,"sources":["CrawlersList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqHA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"CrawlersList.vue","sourceRoot":"src/components","sourcesContent":["<template>\n   <v-app id=\"inspire\">\n      <v-main>\n        <v-card>\n          <v-card-title>\n            Crawlers List {{this.polling}}\n            <!-- {{getRunningCrawlerTaskId['task_id']}} -->\n            <v-spacer></v-spacer>\n            <v-text-field\n              v-model=\"search\"\n              append-icon=\"mdi-magnify\"\n              label=\"Search\"\n              single-line\n              hide-details\n            ></v-text-field>\n          </v-card-title>\n          <v-data-table\n            :headers=\"headers\"\n            :items=\"getCrawlers\"\n            :search=\"search\"\n            class=\"elevation-1\"\n            :loading=\"isLoading\"\n            loading-text=\"Loading... Please wait\">\n            <template v-slot:item.name=\"{ item }\">\n              <b>{{item.name}}</b>\n            </template>\n            <template v-slot:item.start_url=\"{ item }\">\n              <a :href=\"item.start_url\" target=\"_blank\">{{item.start_url}}</a>\n            </template>\n            <template v-slot:item.state=\"{ item }\">\n                <span v-if=\"getCrawlerInfo(item.task_id) != null && crawlerButtonControlSwitch(item.task_id) \">\n                  <!-- {{ getJobState }} -->\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    v-if=\"getJobState == 'pending'\"\n                  >\n                    {{getJobState}}\n                  </v-chip>\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"red\"\n                    text-color=\"white\"\n                    v-else-if=\"getJobState == 'running'\"\n                  >\n                    {{getJobState}}\n                  </v-chip>\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"green\"\n                    text-color=\"white\"\n                    v-else-if=\"getJobState == 'finished'\"\n                  >{{getJobState}}</v-chip>\n                </span>\n                <span v-else-if=\"getCrawlerInfo(item.task_id) != null\">\n                  <!-- {{getCrawlerInfo(item.task_id).state}} -->\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    v-if=\"getCrawlerInfo(item.task_id).state == 'pending'\"\n                  >{{getCrawlerInfo(item.task_id).state}}</v-chip>\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"red\"\n                    text-color=\"white\"\n                    v-else-if=\"getCrawlerInfo(item.task_id).state == 'running'\"\n                  >\n                    {{getCrawlerInfo(item.task_id).state}}\n                  </v-chip>\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"green\"\n                    text-color=\"white\"\n                    v-else-if=\"getCrawlerInfo(item.task_id).state == 'finished'\"\n                  >{{getCrawlerInfo(item.task_id).state}}</v-chip>\n                </span>\n                <span v-else>--</span>\n            </template>\n              <template v-slot:item.btn_run_stop=\"{ item }\">\n                <v-btn\n                  icon\n                  v-if=\"crawlerButtonControlSwitch(item.task_id) && getJobState != 'finished'\"\n                  :disabled=\"getLoadingRunningCrawlerExecution\"\n                  v-on:click=\"exitRunningJob(item.task_id)\"\n                  color=\"black\">\n                  <v-icon>mdi-close-circle-outline</v-icon>\n                </v-btn>\n                <v-btn\n                  icon\n                  v-else\n                  :disabled=\"getLoadingRunningCrawlerExecution || getJobState != 'finished'\"\n                  v-on:click=\"executeCrawler(item.crawlerId)\"\n                  color=\"black\">\n                  <v-icon>mdi-play</v-icon>\n                </v-btn>\n                <!-- <span>{{item.crawlerId}}</span> -->\n              </template>\n              <template v-slot:item.btn_delete=\"{ item }\">\n                <v-btn\n                  icon\n                  :disabled=\"getLoadingRunningCrawlerExecution || getJobState != 'finished'\"\n                  color=\"black\">\n                  <v-icon>mdi-delete</v-icon>\n                </v-btn>\n              </template>\n            </v-data-table>\n        </v-card>\n      </v-main>\n   </v-app>\n</template>\n\n\n<script>\nimport {mapActions,mapGetters} from \"vuex\"\n  export default {\n\n    name: 'CrawlersList',\n    \n    data () {\n      return {\n        search: '',\n        inProcess: true,\n        startLongPolling:false,\n        polling: null,\n        crawlerInProcess:{\n          project: 'default',\n          job: ''\n        },\n        headers: [\n          {\n            text: 'Crawler Name',\n            align: 'start',\n            value: 'name',\n          },\n          { text: 'Start URL', value: 'start_url', sortable: false },\n          { text: 'State', value: 'state', sortable: false },\n          { text: 'Unique ID', value: 'task_id', sortable: false},\n          { text: ' ', value: 'btn_run_stop', sortable: false },\n          { text: ' ', value: 'btn_delete', sortable: false },\n        ],\n        // crawlers_data: getCrawlers\n      }\n    },\n\n    mounted () {\n      this.getCrawlersData();\n    },\n\n    watch: {\n      getFullPath () {\n        this.getCrawlersData()\n      },\n\n      // startLongPolling () {\n      //   console.log(\"LongPolling\")\n      //   this.pollingFreshCrawlersInfo()\n      // },\n\n      getJobState(newVal, oldVal){\n          console.log(\"OLD: \"+oldVal)\n          console.log(\"NEW: \"+newVal)\n          console.log(\"POLLING!!!!!!!!\")\n          this.pollingFreshCrawlersInfo()\n      }\n\n    },\n\n    computed: {\n      ...mapGetters(\"Auth\",[\"isAuth\"]),\n      ...mapGetters(\"Crawler\",[\"getCrawlers\"]),\n      ...mapGetters(\"Crawler\",[\"isLoading\"]),\n      ...mapGetters(\"Crawler\",[\"getLoadingRunningCrawlerExecution\"]),\n      ...mapGetters(\"Crawler\",[\"getRunningCrawler\"]),\n      ...mapGetters(\"Crawler\",[\"getRunningCrawlerTaskId\"]),\n      ...mapGetters(\"Crawler\",[\"getJob\"]),\n      ...mapGetters(\"Crawler\",[\"getFinishedJobs\"]),\n      ...mapGetters(\"Crawler\",[\"getJobState\"]),\n\n      getFullPath () {\n        return this.$route.path\n      },\n\n      // activateLongPolling(){\n      //   console.log(this.getJobState)\n      //   return this.startLongPolling && this.getJobState != 'finished'\n      // }\n\n      \n\n      \n    },\n\n    methods:{\n        ...mapActions('Crawler',['getAllCrawlers']),\n        ...mapActions('Crawler',['runCrawler']),\n        ...mapActions('Crawler',['getJobs']),\n        ...mapActions('Crawler',['cancelRunningJob']),\n        ...mapActions('Crawler',['getRuningJobs']),\n\n        getCrawlersData(){\n          this.getAllCrawlers(this.crawlerInProcess)\n        },\n\n\n        executeCrawler(id){\n          let playload = {'id': id, 'form': this.crawlerInProcess}\n          console.log(playload)\n          this.runCrawler(playload)\n          this.startLongPolling=true\n          // this.pollingFreshCrawlersInfo()\n        },\n\n        exitRunningJob(taskId){\n          this.crawlerInProcess['job'] = taskId\n          this.cancelRunningJob(this.crawlerInProcess)\n          this.inProcess = false\n          this.getAllCrawlers(this.crawlerInProcess)\n        },\n\n        getCrawlerInfo (task_id){\n          let jobs = this.getJob\n          let finished_jobs = this.getFinishedJobs\n          let crawler = null\n          if(jobs.length > 0){\n              crawler = jobs.find(o => o.id === task_id);\n              if(crawler == null && finished_jobs.length > 0){\n                  crawler = finished_jobs.find(o => o.id === task_id);\n              }\n          }\n          else if(finished_jobs.length > 0){\n              crawler = finished_jobs.find(o => o.id === task_id);\n          }\n\n          return crawler\n        },\n\n        crawlerButtonControlSwitch(task_id){\n          let isActive = this.getCrawlerInfo(task_id) ? this.getCrawlerInfo(task_id).isActive : false\n          \n          return isActive\n        },\n\n        pollingFreshCrawlersInfo(){\n          // console.log(this.activateLongPolling)\n            var interval = setInterval(\n              function () { \n                console.log(\"LongPolling--->\"+this.getJobState)\n                this.getAllCrawlers(this.crawlerInProcess)\n                console.log('interval--->'+ this.isAuth)\n                // this.$store.commit('Crawler/SET_POLLING_INTERVAL', interval)\n                if(this.getJobState == 'finished' || !this.isAuth){\n                  console.log(\"STOP POLLING!!\")\n                  clearInterval(interval);\n                  // clearInterval(this.$store.getters['Crawler/getPollingInterval'])\n                }\n              }\n              .bind(this), 3000)\n            // this.polling = interval\n        }\n\n    },\n\n    // beforeDestroy () {\n    //   clearInterval(this.polling)\n    // },\n\n    created () {\n      if(this.getJobState != 'finished'){\n        console.log(\"created===>\")\n        this.pollingFreshCrawlersInfo()\n      }\n    }\n    \n  }\n</script>\n"]}]}