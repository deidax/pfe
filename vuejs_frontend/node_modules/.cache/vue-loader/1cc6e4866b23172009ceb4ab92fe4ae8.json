{"remainingRequest":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/src/components/CrawlersList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/src/components/CrawlersList.vue","mtime":1631373270821},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7bWFwQWN0aW9ucyxtYXBHZXR0ZXJzfSBmcm9tICJ2dWV4IgogIGV4cG9ydCBkZWZhdWx0IHsKCiAgICBuYW1lOiAnQ3Jhd2xlcnNMaXN0JywKICAgIAogICAgZGF0YSAoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgc2VhcmNoOiAnJywKICAgICAgICBpblByb2Nlc3M6IHRydWUsCiAgICAgICAgc3RhcnRMb25nUG9sbGluZzpmYWxzZSwKICAgICAgICBwb2xsaW5nOiBudWxsLAogICAgICAgIGNyYXdsZXJJblByb2Nlc3M6ewogICAgICAgICAgcHJvamVjdDogJ2RlZmF1bHQnLAogICAgICAgICAgam9iOiAnJwogICAgICAgIH0sCiAgICAgICAgaGVhZGVyczogWwogICAgICAgICAgewogICAgICAgICAgICB0ZXh0OiAnQ3Jhd2xlciBOYW1lJywKICAgICAgICAgICAgYWxpZ246ICdzdGFydCcsCiAgICAgICAgICAgIHZhbHVlOiAnbmFtZScsCiAgICAgICAgICB9LAogICAgICAgICAgeyB0ZXh0OiAnU3RhcnQgVVJMJywgdmFsdWU6ICdzdGFydF91cmwnLCBzb3J0YWJsZTogZmFsc2UgfSwKICAgICAgICAgIHsgdGV4dDogJ1N0YXRlJywgdmFsdWU6ICdzdGF0ZScsIHNvcnRhYmxlOiBmYWxzZSB9LAogICAgICAgICAgeyB0ZXh0OiAnICcsIHZhbHVlOiAndGFza19pZCcsIHNvcnRhYmxlOiBmYWxzZX0sCiAgICAgICAgICB7IHRleHQ6ICcgJywgdmFsdWU6ICdidG5fcnVuX3N0b3AnLCBzb3J0YWJsZTogZmFsc2UgfSwKICAgICAgICAgIHsgdGV4dDogJyAnLCB2YWx1ZTogJ2J0bl9kZWxldGUnLCBzb3J0YWJsZTogZmFsc2UgfSwKICAgICAgICBdLAogICAgICAgIC8vIGNyYXdsZXJzX2RhdGE6IGdldENyYXdsZXJzCiAgICAgIH0KICAgIH0sCgogICAgbW91bnRlZCAoKSB7CiAgICAgIHRoaXMuZ2V0Q3Jhd2xlcnNEYXRhKCk7CiAgICB9LAoKICAgIHdhdGNoOiB7CiAgICAgIGdldEZ1bGxQYXRoICgpIHsKICAgICAgICB0aGlzLmdldENyYXdsZXJzRGF0YSgpCiAgICAgIH0sCgogICAgICAvLyBzdGFydExvbmdQb2xsaW5nICgpIHsKICAgICAgLy8gICBjb25zb2xlLmxvZygiTG9uZ1BvbGxpbmciKQogICAgICAvLyAgIHRoaXMucG9sbGluZ0ZyZXNoQ3Jhd2xlcnNJbmZvKCkKICAgICAgLy8gfSwKCiAgICAgIGdldEpvYlN0YXRlKG5ld1ZhbCwgb2xkVmFsKXsKICAgICAgICAgIGNvbnNvbGUubG9nKCJPTEQ6ICIrb2xkVmFsKQogICAgICAgICAgY29uc29sZS5sb2coIk5FVzogIituZXdWYWwpCiAgICAgICAgICBjb25zb2xlLmxvZygiUE9MTElORyEhISEhISEhIikKICAgICAgICAgIHRoaXMucG9sbGluZ0ZyZXNoQ3Jhd2xlcnNJbmZvKCkKICAgICAgfQoKICAgIH0sCgogICAgY29tcHV0ZWQ6IHsKICAgICAgLi4ubWFwR2V0dGVycygiQXV0aCIsWyJpc0F1dGgiXSksCiAgICAgIC4uLm1hcEdldHRlcnMoIkNyYXdsZXIiLFsiZ2V0Q3Jhd2xlcnMiXSksCiAgICAgIC4uLm1hcEdldHRlcnMoIkNyYXdsZXIiLFsiaXNMb2FkaW5nIl0pLAogICAgICAuLi5tYXBHZXR0ZXJzKCJDcmF3bGVyIixbImdldExvYWRpbmdSdW5uaW5nQ3Jhd2xlckV4ZWN1dGlvbiJdKSwKICAgICAgLi4ubWFwR2V0dGVycygiQ3Jhd2xlciIsWyJnZXRSdW5uaW5nQ3Jhd2xlciJdKSwKICAgICAgLi4ubWFwR2V0dGVycygiQ3Jhd2xlciIsWyJnZXRSdW5uaW5nQ3Jhd2xlclRhc2tJZCJdKSwKICAgICAgLi4ubWFwR2V0dGVycygiQ3Jhd2xlciIsWyJnZXRKb2IiXSksCiAgICAgIC4uLm1hcEdldHRlcnMoIkNyYXdsZXIiLFsiZ2V0RmluaXNoZWRKb2JzIl0pLAogICAgICAuLi5tYXBHZXR0ZXJzKCJDcmF3bGVyIixbImdldEpvYlN0YXRlIl0pLAoKICAgICAgZ2V0RnVsbFBhdGggKCkgewogICAgICAgIHJldHVybiB0aGlzLiRyb3V0ZS5wYXRoCiAgICAgIH0sCgogICAgICAvLyBhY3RpdmF0ZUxvbmdQb2xsaW5nKCl7CiAgICAgIC8vICAgY29uc29sZS5sb2codGhpcy5nZXRKb2JTdGF0ZSkKICAgICAgLy8gICByZXR1cm4gdGhpcy5zdGFydExvbmdQb2xsaW5nICYmIHRoaXMuZ2V0Sm9iU3RhdGUgIT0gJ2ZpbmlzaGVkJwogICAgICAvLyB9CgogICAgICAKCiAgICAgIAogICAgfSwKCiAgICBtZXRob2RzOnsKICAgICAgICAuLi5tYXBBY3Rpb25zKCdDcmF3bGVyJyxbJ2dldEFsbENyYXdsZXJzJ10pLAogICAgICAgIC4uLm1hcEFjdGlvbnMoJ0NyYXdsZXInLFsncnVuQ3Jhd2xlciddKSwKICAgICAgICAuLi5tYXBBY3Rpb25zKCdDcmF3bGVyJyxbJ2dldEpvYnMnXSksCiAgICAgICAgLi4ubWFwQWN0aW9ucygnQ3Jhd2xlcicsWydjYW5jZWxSdW5uaW5nSm9iJ10pLAogICAgICAgIC4uLm1hcEFjdGlvbnMoJ0NyYXdsZXInLFsnZ2V0UnVuaW5nSm9icyddKSwKCiAgICAgICAgZ2V0Q3Jhd2xlcnNEYXRhKCl7CiAgICAgICAgICB0aGlzLmdldEFsbENyYXdsZXJzKHRoaXMuY3Jhd2xlckluUHJvY2VzcykKICAgICAgICB9LAoKCiAgICAgICAgZXhlY3V0ZUNyYXdsZXIoaWQpewogICAgICAgICAgbGV0IHBsYXlsb2FkID0geydpZCc6IGlkLCAnZm9ybSc6IHRoaXMuY3Jhd2xlckluUHJvY2Vzc30KICAgICAgICAgIGNvbnNvbGUubG9nKHBsYXlsb2FkKQogICAgICAgICAgdGhpcy5ydW5DcmF3bGVyKHBsYXlsb2FkKQogICAgICAgICAgdGhpcy5zdGFydExvbmdQb2xsaW5nPXRydWUKICAgICAgICAgIC8vIHRoaXMucG9sbGluZ0ZyZXNoQ3Jhd2xlcnNJbmZvKCkKICAgICAgICB9LAoKICAgICAgICBleGl0UnVubmluZ0pvYih0YXNrSWQpewogICAgICAgICAgdGhpcy5jcmF3bGVySW5Qcm9jZXNzWydqb2InXSA9IHRhc2tJZAogICAgICAgICAgdGhpcy5jYW5jZWxSdW5uaW5nSm9iKHRoaXMuY3Jhd2xlckluUHJvY2VzcykKICAgICAgICAgIHRoaXMuaW5Qcm9jZXNzID0gZmFsc2UKICAgICAgICAgIHRoaXMuZ2V0QWxsQ3Jhd2xlcnModGhpcy5jcmF3bGVySW5Qcm9jZXNzKQogICAgICAgIH0sCgogICAgICAgIGdldENyYXdsZXJJbmZvICh0YXNrX2lkKXsKICAgICAgICAgIGxldCBqb2JzID0gdGhpcy5nZXRKb2IKICAgICAgICAgIGxldCBmaW5pc2hlZF9qb2JzID0gdGhpcy5nZXRGaW5pc2hlZEpvYnMKICAgICAgICAgIGxldCBjcmF3bGVyID0gbnVsbAogICAgICAgICAgaWYoam9icy5sZW5ndGggPiAwKXsKICAgICAgICAgICAgICBjcmF3bGVyID0gam9icy5maW5kKG8gPT4gby5pZCA9PT0gdGFza19pZCk7CiAgICAgICAgICAgICAgaWYoY3Jhd2xlciA9PSBudWxsICYmIGZpbmlzaGVkX2pvYnMubGVuZ3RoID4gMCl7CiAgICAgICAgICAgICAgICAgIGNyYXdsZXIgPSBmaW5pc2hlZF9qb2JzLmZpbmQobyA9PiBvLmlkID09PSB0YXNrX2lkKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIGlmKGZpbmlzaGVkX2pvYnMubGVuZ3RoID4gMCl7CiAgICAgICAgICAgICAgY3Jhd2xlciA9IGZpbmlzaGVkX2pvYnMuZmluZChvID0+IG8uaWQgPT09IHRhc2tfaWQpOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBjcmF3bGVyCiAgICAgICAgfSwKCiAgICAgICAgY3Jhd2xlckJ1dHRvbkNvbnRyb2xTd2l0Y2godGFza19pZCl7CiAgICAgICAgICBsZXQgaXNBY3RpdmUgPSB0aGlzLmdldENyYXdsZXJJbmZvKHRhc2tfaWQpID8gdGhpcy5nZXRDcmF3bGVySW5mbyh0YXNrX2lkKS5pc0FjdGl2ZSA6IGZhbHNlCiAgICAgICAgICAKICAgICAgICAgIHJldHVybiBpc0FjdGl2ZQogICAgICAgIH0sCgogICAgICAgIHBvbGxpbmdGcmVzaENyYXdsZXJzSW5mbygpewogICAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5hY3RpdmF0ZUxvbmdQb2xsaW5nKQogICAgICAgICAgICB2YXIgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgKICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7IAogICAgICAgICAgICAgICAgY29uc29sZS5sb2coIkxvbmdQb2xsaW5nLS0tPiIrdGhpcy5nZXRKb2JTdGF0ZSkKICAgICAgICAgICAgICAgIHRoaXMuZ2V0QWxsQ3Jhd2xlcnModGhpcy5jcmF3bGVySW5Qcm9jZXNzKQogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2ludGVydmFsLS0tPicrIHRoaXMuaXNBdXRoKQogICAgICAgICAgICAgICAgLy8gdGhpcy4kc3RvcmUuY29tbWl0KCdDcmF3bGVyL1NFVF9QT0xMSU5HX0lOVEVSVkFMJywgaW50ZXJ2YWwpCiAgICAgICAgICAgICAgICBpZih0aGlzLmdldEpvYlN0YXRlID09ICdmaW5pc2hlZCcgfHwgIXRoaXMuaXNBdXRoKXsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coIlNUT1AgUE9MTElORyEhIikKICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7CiAgICAgICAgICAgICAgICAgIC8vIGNsZWFySW50ZXJ2YWwodGhpcy4kc3RvcmUuZ2V0dGVyc1snQ3Jhd2xlci9nZXRQb2xsaW5nSW50ZXJ2YWwnXSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgLmJpbmQodGhpcyksIDMwMDApCiAgICAgICAgICAgIC8vIHRoaXMucG9sbGluZyA9IGludGVydmFsCiAgICAgICAgfQoKICAgIH0sCgogICAgLy8gYmVmb3JlRGVzdHJveSAoKSB7CiAgICAvLyAgIGNsZWFySW50ZXJ2YWwodGhpcy5wb2xsaW5nKQogICAgLy8gfSwKCiAgICBjcmVhdGVkICgpIHsKICAgICAgaWYodGhpcy5nZXRKb2JTdGF0ZSAhPSAnZmluaXNoZWQnKXsKICAgICAgICBjb25zb2xlLmxvZygiY3JlYXRlZD09PT4iKQogICAgICAgIHRoaXMucG9sbGluZ0ZyZXNoQ3Jhd2xlcnNJbmZvKCkKICAgICAgfQogICAgfQogICAgCiAgfQo="},{"version":3,"sources":["CrawlersList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+GA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"CrawlersList.vue","sourceRoot":"src/components","sourcesContent":["<template>\n   <v-app id=\"inspire\">\n      <v-main>\n        <v-card>\n          <v-card-title>\n            Crawlers List {{this.polling}}\n            <!-- {{getRunningCrawlerTaskId['task_id']}} -->\n            <v-spacer></v-spacer>\n            <v-text-field\n              v-model=\"search\"\n              append-icon=\"mdi-magnify\"\n              label=\"Search\"\n              single-line\n              hide-details\n            ></v-text-field>\n          </v-card-title>\n          <v-data-table\n            :headers=\"headers\"\n            :items=\"getCrawlers\"\n            :search=\"search\"\n            class=\"elevation-1\"\n            :loading=\"isLoading\"\n            loading-text=\"Loading... Please wait\">\n            <template v-slot:item.name=\"{ item }\">\n              <b>{{item.name}}</b>\n            </template>\n            <template v-slot:item.start_url=\"{ item }\">\n              <b>{{item.name}}</b>\n            </template>\n            <template v-slot:item.state=\"{ item }\">\n                <span v-if=\"getCrawlerInfo(item.task_id) != null && crawlerButtonControlSwitch(item.task_id) \">\n                  <!-- {{ getJobState }} -->\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    v-if=\"getJobState == 'pending'\"\n                  >{{getJobState}}</v-chip>\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"red\"\n                    text-color=\"white\"\n                    v-else-if=\"getJobState == 'running'\"\n                  >{{getJobState}}</v-chip>\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"green\"\n                    text-color=\"white\"\n                    v-else-if=\"getJobState == 'finished'\"\n                  >{{getJobState}}</v-chip>\n                </span>\n                <span v-else-if=\"getCrawlerInfo(item.task_id) != null\">\n                  <!-- {{getCrawlerInfo(item.task_id).state}} -->\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    v-if=\"getCrawlerInfo(item.task_id).state == 'pending'\"\n                  >{{getCrawlerInfo(item.task_id).state}}</v-chip>\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"red\"\n                    text-color=\"white\"\n                    v-else-if=\"getCrawlerInfo(item.task_id).state == 'running'\"\n                  >{{getCrawlerInfo(item.task_id).state}}</v-chip>\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"green\"\n                    text-color=\"white\"\n                    v-else-if=\"getCrawlerInfo(item.task_id).state == 'finished'\"\n                  >{{getCrawlerInfo(item.task_id).state}}</v-chip>\n                </span>\n                <span v-else>--</span>\n            </template>\n              <template v-slot:item.btn_run_stop=\"{ item }\">\n                <v-btn\n                  icon\n                  v-if=\"crawlerButtonControlSwitch(item.task_id) && getJobState != 'finished'\"\n                  :disabled=\"getLoadingRunningCrawlerExecution\"\n                  v-on:click=\"exitRunningJob(item.task_id)\"\n                  color=\"black\">\n                  <v-icon>mdi-close-circle-outline</v-icon>\n                </v-btn>\n                <v-btn\n                  icon\n                  v-else\n                  :disabled=\"getLoadingRunningCrawlerExecution || getJobState != 'finished'\"\n                  v-on:click=\"executeCrawler(item.crawlerId)\"\n                  color=\"black\">\n                  <v-icon>mdi-play</v-icon>\n                </v-btn>\n                <!-- <span>{{item.crawlerId}}</span> -->\n              </template>\n              <template v-slot:item.btn_delete=\"{ item }\">\n                <v-btn\n                  icon\n                  :disabled=\"getLoadingRunningCrawlerExecution || getJobState != 'finished'\"\n                  color=\"black\">\n                  <v-icon>mdi-delete</v-icon>\n                </v-btn>\n              </template>\n            </v-data-table>\n        </v-card>\n      </v-main>\n   </v-app>\n</template>\n\n\n<script>\nimport {mapActions,mapGetters} from \"vuex\"\n  export default {\n\n    name: 'CrawlersList',\n    \n    data () {\n      return {\n        search: '',\n        inProcess: true,\n        startLongPolling:false,\n        polling: null,\n        crawlerInProcess:{\n          project: 'default',\n          job: ''\n        },\n        headers: [\n          {\n            text: 'Crawler Name',\n            align: 'start',\n            value: 'name',\n          },\n          { text: 'Start URL', value: 'start_url', sortable: false },\n          { text: 'State', value: 'state', sortable: false },\n          { text: ' ', value: 'task_id', sortable: false},\n          { text: ' ', value: 'btn_run_stop', sortable: false },\n          { text: ' ', value: 'btn_delete', sortable: false },\n        ],\n        // crawlers_data: getCrawlers\n      }\n    },\n\n    mounted () {\n      this.getCrawlersData();\n    },\n\n    watch: {\n      getFullPath () {\n        this.getCrawlersData()\n      },\n\n      // startLongPolling () {\n      //   console.log(\"LongPolling\")\n      //   this.pollingFreshCrawlersInfo()\n      // },\n\n      getJobState(newVal, oldVal){\n          console.log(\"OLD: \"+oldVal)\n          console.log(\"NEW: \"+newVal)\n          console.log(\"POLLING!!!!!!!!\")\n          this.pollingFreshCrawlersInfo()\n      }\n\n    },\n\n    computed: {\n      ...mapGetters(\"Auth\",[\"isAuth\"]),\n      ...mapGetters(\"Crawler\",[\"getCrawlers\"]),\n      ...mapGetters(\"Crawler\",[\"isLoading\"]),\n      ...mapGetters(\"Crawler\",[\"getLoadingRunningCrawlerExecution\"]),\n      ...mapGetters(\"Crawler\",[\"getRunningCrawler\"]),\n      ...mapGetters(\"Crawler\",[\"getRunningCrawlerTaskId\"]),\n      ...mapGetters(\"Crawler\",[\"getJob\"]),\n      ...mapGetters(\"Crawler\",[\"getFinishedJobs\"]),\n      ...mapGetters(\"Crawler\",[\"getJobState\"]),\n\n      getFullPath () {\n        return this.$route.path\n      },\n\n      // activateLongPolling(){\n      //   console.log(this.getJobState)\n      //   return this.startLongPolling && this.getJobState != 'finished'\n      // }\n\n      \n\n      \n    },\n\n    methods:{\n        ...mapActions('Crawler',['getAllCrawlers']),\n        ...mapActions('Crawler',['runCrawler']),\n        ...mapActions('Crawler',['getJobs']),\n        ...mapActions('Crawler',['cancelRunningJob']),\n        ...mapActions('Crawler',['getRuningJobs']),\n\n        getCrawlersData(){\n          this.getAllCrawlers(this.crawlerInProcess)\n        },\n\n\n        executeCrawler(id){\n          let playload = {'id': id, 'form': this.crawlerInProcess}\n          console.log(playload)\n          this.runCrawler(playload)\n          this.startLongPolling=true\n          // this.pollingFreshCrawlersInfo()\n        },\n\n        exitRunningJob(taskId){\n          this.crawlerInProcess['job'] = taskId\n          this.cancelRunningJob(this.crawlerInProcess)\n          this.inProcess = false\n          this.getAllCrawlers(this.crawlerInProcess)\n        },\n\n        getCrawlerInfo (task_id){\n          let jobs = this.getJob\n          let finished_jobs = this.getFinishedJobs\n          let crawler = null\n          if(jobs.length > 0){\n              crawler = jobs.find(o => o.id === task_id);\n              if(crawler == null && finished_jobs.length > 0){\n                  crawler = finished_jobs.find(o => o.id === task_id);\n              }\n          }\n          else if(finished_jobs.length > 0){\n              crawler = finished_jobs.find(o => o.id === task_id);\n          }\n\n          return crawler\n        },\n\n        crawlerButtonControlSwitch(task_id){\n          let isActive = this.getCrawlerInfo(task_id) ? this.getCrawlerInfo(task_id).isActive : false\n          \n          return isActive\n        },\n\n        pollingFreshCrawlersInfo(){\n          // console.log(this.activateLongPolling)\n            var interval = setInterval(\n              function () { \n                console.log(\"LongPolling--->\"+this.getJobState)\n                this.getAllCrawlers(this.crawlerInProcess)\n                console.log('interval--->'+ this.isAuth)\n                // this.$store.commit('Crawler/SET_POLLING_INTERVAL', interval)\n                if(this.getJobState == 'finished' || !this.isAuth){\n                  console.log(\"STOP POLLING!!\")\n                  clearInterval(interval);\n                  // clearInterval(this.$store.getters['Crawler/getPollingInterval'])\n                }\n              }\n              .bind(this), 3000)\n            // this.polling = interval\n        }\n\n    },\n\n    // beforeDestroy () {\n    //   clearInterval(this.polling)\n    // },\n\n    created () {\n      if(this.getJobState != 'finished'){\n        console.log(\"created===>\")\n        this.pollingFreshCrawlersInfo()\n      }\n    }\n    \n  }\n</script>\n"]}]}