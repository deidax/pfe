{"remainingRequest":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/babel-loader/lib/index.js!/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/src/store/modules/crawler/actions.js","dependencies":[{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/src/store/modules/crawler/actions.js","mtime":1631407811844},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/src/store/modules/crawler/actions.js"],"names":["Crawler","Scrapyd","router","createCrawler","form","commit","then","response","console","log","data","push","name","catch","error","undefined","error_data","status","error_message","statusText","runCrawler","playload","dispatch","id","getAllCrawlers","getRuningJobs","pending","running","finished","length","pending_result","map","el","o","Object","assign","state","isActive","running_result","finished_result","cancelRunningJob"],"mappings":"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","sourcesContent":["import Crawler from \"../../../apis/crawler\";\r\nimport Scrapyd from \"../../../apis/scrapyd\";\r\nimport router from \"../../../router/index\"\r\n\r\n// Create Crawler\r\nexport const createCrawler = ({ commit }, form) => {\r\n    commit('SET_LOADING',true)\r\n    commit('CLEAR_OTHER_ERRORS')\r\n\r\n    Crawler.createCrawler(form).then(response => {\r\n        console.log(\"IN CREATE CRAWLER\")\r\n        console.log(response.data)\r\n        // if(response.data.start_url){\r\n        //     commit('SET_CRAWLER_URL', response.data.auth_token)\r\n        // }\r\n        // commit('SET_CRAWLERDATA', response.data);\r\n        commit('SET_LOADING',false)\r\n        router.push({ name: 'crawlers_list' });\r\n        }).catch((error) => {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n            commit('SET_CRAWLERDATA', null);\r\n            commit('SET_LOADING',false);\r\n    })\r\n    .catch((error) => {\r\n        if(error.response != undefined)\r\n        {\r\n            let error_data = error.response.data\r\n            console.log(error.response.status)\r\n            // commit('SET_CRAWLERDATA', null);\r\n            if (error.response.status != 400) {\r\n                let error_message = error.response.status+\" \"+error.response.statusText\r\n                commit('SET_OTHER_ERRORS',error_message)\r\n            }\r\n        }\r\n        else\r\n        {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n        }\r\n        \r\n        \r\n        commit('SET_LOADING',false)\r\n    })\r\n    \r\n}\r\n\r\n\r\n//Run Crawler\r\nexport const runCrawler = ({ commit, dispatch }, playload) => {\r\n    commit('SET_LOADING',true)\r\n    commit('CLEAR_OTHER_ERRORS')\r\n    commit('SET_LOADING_CRAWLER_EXECUTION', true)\r\n    Crawler.runCrawler(playload.id).then(response => {\r\n        \r\n        // if(response.data.start_url){\r\n        //     commit('SET_CRAWLER_URL', response.data.auth_token)\r\n        // }\r\n        commit('SET_RUNNING_CRAWLER', response.data)\r\n        commit('SET_LOADING_CRAWLER_EXECUTION', false)\r\n        commit('SET_LOADING',false)\r\n        dispatch('getAllCrawlers', playload.form)\r\n        commit('CLEAR_OTHER_ERRORS')\r\n        commit('SET_RUNNING_CRAWLER_TASK_ID', response.data['task_id'])\r\n        // router.push({ name: 'dashboard' });\r\n        }).catch((error) => {\r\n            commit('SET_RUNNING_CRAWLER', null)\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n            commit('SET_LOADING_CRAWLER_EXECUTION', false)\r\n            commit('SET_LOADING',false);\r\n    })\r\n    .catch((error) => {\r\n        if(error.response != undefined)\r\n        {\r\n            let error_data = error.response.data\r\n            console.log(error.response.status)\r\n            commit('SET_RUNNING_CRAWLER', null)\r\n            if (error.response.status != 400) {\r\n                let error_message = error.response.status+\" \"+error.response.statusText\r\n                commit('SET_OTHER_ERRORS',error_message)\r\n            }\r\n        }\r\n        else\r\n        {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n        }\r\n        \r\n        commit('SET_LOADING_CRAWLER_EXECUTION', false)\r\n        commit('SET_LOADING',false)\r\n    })\r\n    \r\n}\r\n\r\n\r\n// Get Crawler\r\nexport const getAllCrawlers = ({ commit, dispatch  }, form) => {\r\n    commit('SET_LOADING',true)\r\n    commit('CLEAR_OTHER_ERRORS')\r\n\r\n    Crawler.getAllCrawlers().then(response => {\r\n        console.log(\"GET CRAWLERS\")\r\n        console.log(response.data)\r\n        // if(response.data.start_url){\r\n        //     commit('SET_CRAWLER_URL', response.data.auth_token)\r\n        // }\r\n        commit('SET_CRAWLERS_DATA', response.data);\r\n        dispatch('getRuningJobs', form)\r\n        commit('SET_LOADING',false)\r\n        // router.push({ name: 'dashboard' });\r\n        }).catch((error) => {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n            commit('SET_CRAWLERDATA', null);\r\n            commit('SET_LOADING',false);\r\n    })\r\n    .catch((error) => {\r\n        if(error.response != undefined)\r\n        {\r\n            let error_data = error.response.data\r\n            console.log(error.response.status)\r\n            commit('SET_CRAWLERS_DATA', null);\r\n            if (error.response.status != 400) {\r\n                let error_message = error.response.status+\" \"+error.response.statusText\r\n                commit('SET_OTHER_ERRORS',error_message)\r\n            }\r\n        }\r\n        else\r\n        {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n        }\r\n        \r\n        \r\n        commit('SET_LOADING',false)\r\n    })\r\n    \r\n}\r\n\r\n\r\n// Get Running jobs\r\nexport const getRuningJobs = ({ commit}, form) => {\r\n    commit('SET_LOADING_TO_SCRAPYD',true)\r\n    commit('CLEAR_OTHER_ERRORS')\r\n    Scrapyd.getRuningJobs(form).then(response => {\r\n        console.log(response.data)\r\n        let pending = response.data['pending']\r\n        let running = response.data['running']\r\n        let finished = response.data['finished']\r\n        if(pending.length > 0 ){\r\n            // pending['state'] = 'pending'\r\n            var pending_result = pending.map(function(el) {\r\n                var o = Object.assign({}, el);\r\n                o.state = 'pending';\r\n                o.isActive = true;\r\n                return o;\r\n            })\r\n            commit('SET_JOB',pending_result)\r\n            commit('SET_JOB_STATE', 'pending')\r\n        }\r\n        else if(running.length > 0){\r\n            var running_result = running.map(function(el) {\r\n                var o = Object.assign({}, el);\r\n                o.state = 'running';\r\n                o.isActive = true;\r\n                return o;\r\n            })\r\n            commit('SET_JOB',running_result)\r\n            commit('SET_JOB_STATE', 'running')\r\n        }\r\n        else if(finished.length > 0){\r\n            var finished_result = finished.map(function(el) {\r\n                var o = Object.assign({}, el);\r\n                o.state = 'finished';\r\n                o.isActive = false;\r\n                return o;\r\n            })\r\n            commit('SET_FINISHED_JOBS',finished_result)\r\n            commit('SET_JOB_STATE', 'finished')\r\n        }\r\n        \r\n        commit('SET_LOADING_TO_SCRAPYD',false)\r\n        }).catch((error) => {\r\n            error = error+\". Can't connect to the server.JOBS\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n            commit('SET_LOADING_TO_SCRAPYD',false);\r\n    })\r\n    .catch((error) => {\r\n        if(error.response != undefined)\r\n        {\r\n            console.log(error.response.status)\r\n            commit('SET_CRAWLERS_DATA', null);\r\n            if (error.response.status != 400) {\r\n                let error_message = error.response.status+\" \"+error.response.statusText\r\n                commit('SET_OTHER_ERRORS',error_message)\r\n            }\r\n        }\r\n        else\r\n        {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n        }\r\n        \r\n        \r\n        commit('SET_LOADING_TO_SCRAPYD',false)\r\n    })\r\n    \r\n}\r\n\r\n// Cancel Running jobs\r\nexport const cancelRunningJob = ({ commit, dispatch }, form) => {\r\n    commit('SET_LOADING',true)\r\n    commit('CLEAR_OTHER_ERRORS')\r\n    commit('SET_LOADING_CRAWLER_EXECUTION', true)\r\n    \r\n    Scrapyd.cancelRunningJob(form).then(response => {\r\n        console.log(\"CANCELING RUNNING JOB\")\r\n        console.log(response.data)\r\n        // if(response.data.start_url){\r\n        //     commit('SET_CRAWLER_URL', response.data.auth_token)\r\n        // }\r\n        // commit('SET_CRAWLERDATA', response.data);\r\n        commit('SET_LOADING_CRAWLER_EXECUTION', false)\r\n        commit('SET_LOADING',false)\r\n        // router.push({ name: 'crawlers_list' });\r\n        }).catch((error) => {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n            commit('SET_LOADING',false);\r\n    })\r\n    .catch((error) => {\r\n        if(error.response != undefined)\r\n        {\r\n            let error_data = error.response.data\r\n            console.log(error.response.status)\r\n            // commit('SET_CRAWLERDATA', null);\r\n            if (error.response.status != 400) {\r\n                let error_message = error.response.status+\" \"+error.response.statusText\r\n                commit('SET_OTHER_ERRORS',error_message)\r\n            }\r\n        }\r\n        else\r\n        {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n        }\r\n        \r\n        \r\n        commit('SET_LOADING',false)\r\n        commit('SET_LOADING_CRAWLER_EXECUTION', false)\r\n    })\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}]}