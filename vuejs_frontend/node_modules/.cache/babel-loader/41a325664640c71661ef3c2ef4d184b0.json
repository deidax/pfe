{"remainingRequest":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/babel-loader/lib/index.js!/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/src/store/modules/crawler/actions.js","dependencies":[{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/src/store/modules/crawler/actions.js","mtime":1631542249568},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/src/store/modules/crawler/actions.js"],"names":["Crawler","Scrapyd","router","createCrawler","playload","commit","form","then","response","push","name","catch","error","undefined","error_data","data","console","log","status","error_message","statusText","runCrawler","dispatch","id","getAllCrawlers","getRuningJobs","pending","running","finished","length","pending_result","map","el","o","Object","assign","state","isActive","running_result","finished_result","cancelRunningJob","deleteCrawler","crawler_id","vm","crawlerAlert","crawlerAlertMessage","message","crawlerAlertIcon","crawlerInProcess","getCrawlerDetailsApi","getCrawlerDetails"],"mappings":"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","sourcesContent":["import Crawler from \"../../../apis/crawler\";\r\nimport Scrapyd from \"../../../apis/scrapyd\";\r\nimport router from \"../../../router/index\"\r\n\r\n// Create Crawler\r\nexport const createCrawler = ({ commit }, playload) => {\r\n    commit('SET_LOADING',true)\r\n    commit('CLEAR_OTHER_ERRORS')\r\n\r\n    Crawler.createCrawler(playload.form).then(response => {\r\n\r\n        // commit('SET_CRAWLERDATA', response.data);\r\n        commit('SET_LOADING',false)\r\n        // playload.vm.crawlerDeleted = true\r\n        // playload.vm.crawlerDeletedMessage = response.data.message\r\n        router.push({ name: 'crawlers_list' });\r\n        }).catch((error) => {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n            commit('SET_CRAWLERDATA', null);\r\n            commit('SET_LOADING',false);\r\n    })\r\n    .catch((error) => {\r\n        if(error.response != undefined)\r\n        {\r\n            let error_data = error.response.data\r\n            console.log(error.response.status)\r\n            // commit('SET_CRAWLERDATA', null);\r\n            if (error.response.status != 400) {\r\n                let error_message = error.response.status+\" \"+error.response.statusText\r\n                commit('SET_OTHER_ERRORS',error_message)\r\n            }\r\n        }\r\n        else\r\n        {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n        }\r\n        \r\n        \r\n        commit('SET_LOADING',false)\r\n    })\r\n    \r\n}\r\n\r\n\r\n//Run Crawler\r\nexport const runCrawler = ({ commit, dispatch }, playload) => {\r\n    commit('SET_LOADING',true)\r\n    commit('CLEAR_OTHER_ERRORS')\r\n    commit('SET_LOADING_CRAWLER_EXECUTION', true)\r\n    Crawler.runCrawler(playload.id).then(response => {\r\n        console.log(response.data)\r\n        // if(response.data.start_url){\r\n        //     commit('SET_CRAWLER_URL', response.data.auth_token)\r\n        // }\r\n        commit('SET_RUNNING_CRAWLER', response.data)\r\n        commit('SET_LOADING_CRAWLER_EXECUTION', false)\r\n        commit('SET_LOADING',false)\r\n        dispatch('getAllCrawlers', playload.form)\r\n        dispatch('getCrawlerDetailsApi')\r\n        commit('CLEAR_OTHER_ERRORS')\r\n        commit('SET_RUNNING_CRAWLER_TASK_ID', response.data['task_id'])\r\n        // router.push({ name: 'dashboard' });\r\n        }).catch((error) => {\r\n            commit('SET_RUNNING_CRAWLER', null)\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n            commit('SET_LOADING_CRAWLER_EXECUTION', false)\r\n            commit('SET_LOADING',false);\r\n    })\r\n    .catch((error) => {\r\n        if(error.response != undefined)\r\n        {\r\n            let error_data = error.response.data\r\n            console.log(error.response.status)\r\n            commit('SET_RUNNING_CRAWLER', null)\r\n            if (error.response.status != 400) {\r\n                let error_message = error.response.status+\" \"+error.response.statusText\r\n                commit('SET_OTHER_ERRORS',error_message)\r\n            }\r\n        }\r\n        else\r\n        {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n        }\r\n        \r\n        commit('SET_LOADING_CRAWLER_EXECUTION', false)\r\n        commit('SET_LOADING',false)\r\n    })\r\n    \r\n}\r\n\r\n\r\n// Get Crawlers\r\nexport const getAllCrawlers = ({ commit, dispatch  }, form) => {\r\n    commit('SET_LOADING',true)\r\n    commit('CLEAR_OTHER_ERRORS')\r\n\r\n    Crawler.getAllCrawlers().then(response => {\r\n        // if(response.data.start_url){\r\n        //     commit('SET_CRAWLER_URL', response.data.auth_token)\r\n        // }\r\n        commit('SET_CRAWLERS_DATA', response.data);\r\n        dispatch('getRuningJobs', form)\r\n        commit('SET_LOADING',false)\r\n        // router.push({ name: 'dashboard' });\r\n        }).catch((error) => {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n            commit('SET_CRAWLERDATA', null);\r\n            commit('SET_LOADING',false);\r\n    })\r\n    .catch((error) => {\r\n        if(error.response != undefined)\r\n        {\r\n            let error_data = error.response.data\r\n            console.log(error.response.status)\r\n            commit('SET_CRAWLERS_DATA', null);\r\n            if (error.response.status != 400) {\r\n                let error_message = error.response.status+\" \"+error.response.statusText\r\n                commit('SET_OTHER_ERRORS',error_message)\r\n            }\r\n        }\r\n        else\r\n        {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n        }\r\n        \r\n        \r\n        commit('SET_LOADING',false)\r\n    })\r\n    \r\n}\r\n\r\n\r\n// Get Running jobs\r\nexport const getRuningJobs = ({ commit}, form) => {\r\n    commit('SET_LOADING_TO_SCRAPYD',true)\r\n    commit('CLEAR_OTHER_ERRORS')\r\n    Scrapyd.getRuningJobs(form).then(response => {\r\n        let pending = response.data['pending']\r\n        let running = response.data['running']\r\n        let finished = response.data['finished']\r\n        if(pending.length > 0 ){\r\n            // pending['state'] = 'pending'\r\n            var pending_result = pending.map(function(el) {\r\n                var o = Object.assign({}, el);\r\n                o.state = 'pending';\r\n                o.isActive = true;\r\n                return o;\r\n            })\r\n            commit('SET_JOB',pending_result)\r\n            commit('SET_JOB_STATE', 'pending')\r\n        }\r\n        else if(running.length > 0){\r\n            var running_result = running.map(function(el) {\r\n                var o = Object.assign({}, el);\r\n                o.state = 'running';\r\n                o.isActive = true;\r\n                return o;\r\n            })\r\n            commit('SET_JOB',running_result)\r\n            commit('SET_JOB_STATE', 'running')\r\n        }\r\n        else if(finished.length > 0){\r\n            var finished_result = finished.map(function(el) {\r\n                var o = Object.assign({}, el);\r\n                o.state = 'finished';\r\n                o.isActive = false;\r\n                return o;\r\n            })\r\n            commit('SET_FINISHED_JOBS',finished_result)\r\n            commit('SET_JOB_STATE', 'finished')\r\n        }\r\n        \r\n        commit('SET_LOADING_TO_SCRAPYD',false)\r\n        }).catch((error) => {\r\n            error = error+\". Can't connect to the server.JOBS\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n            commit('SET_LOADING_TO_SCRAPYD',false);\r\n    })\r\n    .catch((error) => {\r\n        if(error.response != undefined)\r\n        {\r\n            console.log(error.response.status)\r\n            commit('SET_CRAWLERS_DATA', null);\r\n            if (error.response.status != 400) {\r\n                let error_message = error.response.status+\" \"+error.response.statusText\r\n                commit('SET_OTHER_ERRORS',error_message)\r\n            }\r\n        }\r\n        else\r\n        {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n        }\r\n        \r\n        \r\n        commit('SET_LOADING_TO_SCRAPYD',false)\r\n    })\r\n    \r\n}\r\n\r\n// Cancel Running jobs\r\nexport const cancelRunningJob = ({ commit, dispatch }, form) => {\r\n    commit('SET_LOADING',true)\r\n    commit('CLEAR_OTHER_ERRORS')\r\n    commit('SET_LOADING_CRAWLER_EXECUTION', true)\r\n    \r\n    Scrapyd.cancelRunningJob(form).then(response => {\r\n        // if(response.data.start_url){\r\n        //     commit('SET_CRAWLER_URL', response.data.auth_token)\r\n        // }\r\n        // commit('SET_CRAWLERDATA', response.data);\r\n        commit('SET_LOADING_CRAWLER_EXECUTION', false)\r\n        commit('SET_LOADING',false)\r\n        // router.push({ name: 'crawlers_list' });\r\n        }).catch((error) => {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n            commit('SET_LOADING',false);\r\n    })\r\n    .catch((error) => {\r\n        if(error.response != undefined)\r\n        {\r\n            let error_data = error.response.data\r\n            console.log(error.response.status)\r\n            // commit('SET_CRAWLERDATA', null);\r\n            if (error.response.status != 400) {\r\n                let error_message = error.response.status+\" \"+error.response.statusText\r\n                commit('SET_OTHER_ERRORS',error_message)\r\n            }\r\n        }\r\n        else\r\n        {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n        }\r\n        \r\n        \r\n        commit('SET_LOADING',false)\r\n        commit('SET_LOADING_CRAWLER_EXECUTION', false)\r\n    })\r\n    \r\n}\r\n\r\n// Delete Crawler\r\nexport const deleteCrawler = ({ commit, dispatch }, playload )=> {\r\n    commit('CLEAR_OTHER_ERRORS')\r\n    commit('DELETING_CRAWLER_LOADING', true)\r\n    Crawler.deleteCrawler(playload.crawler_id).then(response => {\r\n        // if(response.data.start_url){\r\n        //     commit('SET_CRAWLER_URL', response.data.auth_token)\r\n        // }\r\n        playload.vm.crawlerAlert = true\r\n        playload.vm.crawlerAlertMessage = response.data.message\r\n        playload.vm.crawlerAlertIcon = 'mdi-delete-sweep'\r\n        commit('DELETING_CRAWLER_LOADING', false)\r\n        dispatch('getAllCrawlers', playload.crawlerInProcess)\r\n        // router.push({ name: 'crawlers_list' });\r\n        }).catch((error) => {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n            commit('DELETING_CRAWLER_LOADING',false);\r\n    })\r\n    .catch((error) => {\r\n        if(error.response != undefined)\r\n        {\r\n            let error_data = error.response.data\r\n            console.log(error.response.status)\r\n            // commit('SET_CRAWLERDATA', null);\r\n            if (error.response.status != 400) {\r\n                let error_message = error.response.status+\" \"+error.response.statusText\r\n                commit('SET_OTHER_ERRORS',error_message)\r\n            }\r\n        }\r\n        else\r\n        {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n        }\r\n        \r\n        \r\n        commit('DELETING_CRAWLER_LOADING', false)\r\n    })\r\n    \r\n}\r\n\r\n// Crawler Details\r\nexport const getCrawlerDetailsApi = ({ commit })=> {\r\n    commit('CLEAR_OTHER_ERRORS')\r\n    commit('CRAWLER_DETAILS_LOADING', true)\r\n    Crawler.getCrawlerDetails().then(response => {\r\n        console.log(\"Crawler Details--->\")\r\n        console.log(response.data)\r\n        // console.log(\"State--->\")\r\n        // console.log(state.job_state)\r\n        commit('SET_CRAWLER_DETAILS', response.data)\r\n        commit('CRAWLER_DETAILS_LOADING', false)\r\n        // router.push({ name: 'crawlers_list' });\r\n        }).catch((error) => {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n            commit('CRAWLER_DETAILS_LOADING',false);\r\n    })\r\n    .catch((error) => {\r\n        if(error.response != undefined)\r\n        {\r\n            let error_data = error.response.data\r\n            console.log(error.response.status)\r\n            // commit('SET_CRAWLERDATA', null);\r\n            if (error.response.status != 400) {\r\n                let error_message = error.response.status+\" \"+error.response.statusText\r\n                commit('SET_OTHER_ERRORS',error_message)\r\n            }\r\n        }\r\n        else\r\n        {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n        }\r\n        \r\n        \r\n        commit('CRAWLER_DETAILS_LOADING', false)\r\n    })\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}]}