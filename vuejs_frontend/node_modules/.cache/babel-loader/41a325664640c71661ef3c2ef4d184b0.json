{"remainingRequest":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/babel-loader/lib/index.js!/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/src/store/modules/crawler/actions.js","dependencies":[{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/src/store/modules/crawler/actions.js","mtime":1632052782909},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/src/store/modules/crawler/actions.js"],"names":["Crawler","Scrapyd","router","createCrawler","playload","commit","form","then","response","catch","error","undefined","error_data","data","console","log","status","error_message","statusText","runCrawler","dispatch","id","getAllCrawlers","getRuningJobs","pending","running","finished","length","pending_result","map","el","o","Object","assign","state","isActive","running_result","finished_result","cancelRunningJob","deleteCrawler","crawler_id","vm","crawlerAlert","crawlerAlertMessage","message","crawlerAlertIcon","crawlerInProcess","getCrawlerDetailsApi","getCrawlerDetails","getLogfile","getProductsData","dropProductsData","dropProductsDataAlert","dropProductsDataAlertMessage","dropProductsDataAlertIcon","push","name"],"mappings":"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","sourcesContent":["import Crawler from \"../../../apis/crawler\";\r\nimport Scrapyd from \"../../../apis/scrapyd\";\r\nimport router from \"../../../router/index\"\r\n\r\n// Create Crawler\r\nexport const createCrawler = ({ commit }, playload) => {\r\n    commit('SET_LOADING',true)\r\n    commit('CLEAR_OTHER_ERRORS')\r\n\r\n    Crawler.createCrawler(playload.form).then(response => {\r\n\r\n        // commit('SET_CRAWLERDATA', response.data);\r\n        commit('SET_LOADING',false)\r\n        // playload.vm.crawlerDeleted = true\r\n        // playload.vm.crawlerDeletedMessage = response.data.message\r\n        // router.push({ name: 'crawlers_list' });\r\n        }).catch((error) => {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n            commit('SET_CRAWLERDATA', null);\r\n            commit('SET_LOADING',false);\r\n    })\r\n    .catch((error) => {\r\n        if(error.response != undefined)\r\n        {\r\n            let error_data = error.response.data\r\n            console.log(error.response.status)\r\n            // commit('SET_CRAWLERDATA', null);\r\n            if (error.response.status != 400) {\r\n                let error_message = error.response.status+\" \"+error.response.statusText\r\n                commit('SET_OTHER_ERRORS',error_message)\r\n            }\r\n        }\r\n        else\r\n        {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n        }\r\n        \r\n        \r\n        commit('SET_LOADING',false)\r\n    })\r\n    \r\n}\r\n\r\n\r\n//Run Crawler\r\nexport const runCrawler = ({ commit, dispatch }, playload) => {\r\n    commit('SET_LOADING',true)\r\n    commit('CLEAR_OTHER_ERRORS')\r\n    commit('SET_LOADING_CRAWLER_EXECUTION', true)\r\n    Crawler.runCrawler(playload.id).then(response => {\r\n        console.log(response.data)\r\n        // if(response.data.start_url){\r\n        //     commit('SET_CRAWLER_URL', response.data.auth_token)\r\n        // }\r\n        commit('SET_RUNNING_CRAWLER', response.data)\r\n        commit('SET_LOADING_CRAWLER_EXECUTION', false)\r\n        commit('SET_LOADING',false)\r\n        dispatch('getAllCrawlers', playload.form)\r\n        dispatch('getCrawlerDetailsApi')\r\n        commit('CLEAR_OTHER_ERRORS')\r\n        commit('SET_RUNNING_CRAWLER_TASK_ID', response.data['task_id'])\r\n        // router.push({ name: 'dashboard' });\r\n        }).catch((error) => {\r\n            commit('SET_RUNNING_CRAWLER', null)\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n            commit('SET_LOADING_CRAWLER_EXECUTION', false)\r\n            commit('SET_LOADING',false);\r\n    })\r\n    .catch((error) => {\r\n        if(error.response != undefined)\r\n        {\r\n            let error_data = error.response.data\r\n            console.log(error.response.status)\r\n            commit('SET_RUNNING_CRAWLER', null)\r\n            if (error.response.status != 400) {\r\n                let error_message = error.response.status+\" \"+error.response.statusText\r\n                commit('SET_OTHER_ERRORS',error_message)\r\n            }\r\n        }\r\n        else\r\n        {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n        }\r\n        \r\n        commit('SET_LOADING_CRAWLER_EXECUTION', false)\r\n        commit('SET_LOADING',false)\r\n    })\r\n    \r\n}\r\n\r\n\r\n// Get Crawlers\r\nexport const getAllCrawlers = ({ commit, dispatch  }, form) => {\r\n    commit('SET_LOADING',true)\r\n    commit('CLEAR_OTHER_ERRORS')\r\n\r\n    Crawler.getAllCrawlers().then(response => {\r\n        // if(response.data.start_url){\r\n        //     commit('SET_CRAWLER_URL', response.data.auth_token)\r\n        // }\r\n        commit('SET_CRAWLERS_DATA', response.data);\r\n        dispatch('getRuningJobs', form)\r\n        commit('SET_LOADING',false)\r\n        // router.push({ name: 'dashboard' });\r\n        }).catch((error) => {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n            // commit('SET_CRAWLERDATA', null);\r\n            commit('SET_LOADING',false);\r\n    })\r\n    .catch((error) => {\r\n        if(error.response != undefined)\r\n        {\r\n            let error_data = error.response.data\r\n            console.log(error.response.status)\r\n            commit('SET_CRAWLERS_DATA', null);\r\n            if (error.response.status != 400) {\r\n                let error_message = error.response.status+\" \"+error.response.statusText\r\n                commit('SET_OTHER_ERRORS',error_message)\r\n            }\r\n        }\r\n        else\r\n        {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n        }\r\n        \r\n        \r\n        commit('SET_LOADING',false)\r\n    })\r\n    \r\n}\r\n\r\n\r\n// Get Running jobs\r\nexport const getRuningJobs = ({ commit}, form) => {\r\n    commit('SET_LOADING_TO_SCRAPYD',true)\r\n    commit('CLEAR_OTHER_ERRORS')\r\n    Scrapyd.getRuningJobs(form).then(response => {\r\n        let pending = response.data['pending']\r\n        let running = response.data['running']\r\n        let finished = response.data['finished']\r\n        if(pending.length > 0 ){\r\n            // pending['state'] = 'pending'\r\n            var pending_result = pending.map(function(el) {\r\n                var o = Object.assign({}, el);\r\n                o.state = 'pending';\r\n                o.isActive = true;\r\n                return o;\r\n            })\r\n            commit('SET_JOB',pending_result)\r\n            commit('SET_JOB_STATE', 'pending')\r\n        }\r\n        else if(running.length > 0){\r\n            var running_result = running.map(function(el) {\r\n                var o = Object.assign({}, el);\r\n                o.state = 'running';\r\n                o.isActive = true;\r\n                return o;\r\n            })\r\n            commit('SET_JOB',running_result)\r\n            commit('SET_JOB_STATE', 'running')\r\n        }\r\n        else if(finished.length > 0){\r\n            var finished_result = finished.map(function(el) {\r\n                var o = Object.assign({}, el);\r\n                o.state = 'finished';\r\n                o.isActive = false;\r\n                return o;\r\n            })\r\n            commit('SET_FINISHED_JOBS',finished_result)\r\n            commit('SET_JOB_STATE', 'finished')\r\n        }\r\n        \r\n        commit('SET_LOADING_TO_SCRAPYD',false)\r\n        }).catch((error) => {\r\n            error = error+\". Can't connect to the server.JOBS\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n            commit('SET_LOADING_TO_SCRAPYD',false);\r\n    })\r\n    .catch((error) => {\r\n        if(error.response != undefined)\r\n        {\r\n            console.log(error.response.status)\r\n            commit('SET_CRAWLERS_DATA', null);\r\n            if (error.response.status != 400) {\r\n                let error_message = error.response.status+\" \"+error.response.statusText\r\n                commit('SET_OTHER_ERRORS',error_message)\r\n            }\r\n        }\r\n        else\r\n        {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n        }\r\n        \r\n        \r\n        commit('SET_LOADING_TO_SCRAPYD',false)\r\n    })\r\n    \r\n}\r\n\r\n// Cancel Running jobs\r\nexport const cancelRunningJob = ({ commit, dispatch }, form) => {\r\n    commit('SET_LOADING',true)\r\n    commit('CLEAR_OTHER_ERRORS')\r\n    commit('SET_LOADING_CRAWLER_EXECUTION', true)\r\n    \r\n    Scrapyd.cancelRunningJob(form).then(response => {\r\n        // if(response.data.start_url){\r\n        //     commit('SET_CRAWLER_URL', response.data.auth_token)\r\n        // }\r\n        // commit('SET_CRAWLERDATA', response.data);\r\n        commit('SET_LOADING_CRAWLER_EXECUTION', false)\r\n        commit('SET_LOADING',false)\r\n        // router.push({ name: 'crawlers_list' });\r\n        }).catch((error) => {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n            commit('SET_LOADING',false);\r\n    })\r\n    .catch((error) => {\r\n        if(error.response != undefined)\r\n        {\r\n            let error_data = error.response.data\r\n            console.log(error.response.status)\r\n            // commit('SET_CRAWLERDATA', null);\r\n            if (error.response.status != 400) {\r\n                let error_message = error.response.status+\" \"+error.response.statusText\r\n                commit('SET_OTHER_ERRORS',error_message)\r\n            }\r\n        }\r\n        else\r\n        {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n        }\r\n        \r\n        \r\n        commit('SET_LOADING',false)\r\n        commit('SET_LOADING_CRAWLER_EXECUTION', false)\r\n    })\r\n    \r\n}\r\n\r\n// Delete Crawler\r\nexport const deleteCrawler = ({ commit, dispatch }, playload )=> {\r\n    commit('CLEAR_OTHER_ERRORS')\r\n    commit('DELETING_CRAWLER_LOADING', true)\r\n    Crawler.deleteCrawler(playload.crawler_id).then(response => {\r\n        // if(response.data.start_url){\r\n        //     commit('SET_CRAWLER_URL', response.data.auth_token)\r\n        // }\r\n        playload.vm.crawlerAlert = true\r\n        playload.vm.crawlerAlertMessage = response.data.message\r\n        playload.vm.crawlerAlertIcon = 'mdi-delete-sweep'\r\n        commit('DELETING_CRAWLER_LOADING', false)\r\n        dispatch('getAllCrawlers', playload.crawlerInProcess)\r\n        // router.push({ name: 'crawlers_list' });\r\n        }).catch((error) => {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n            commit('DELETING_CRAWLER_LOADING',false);\r\n    })\r\n    .catch((error) => {\r\n        if(error.response != undefined)\r\n        {\r\n            let error_data = error.response.data\r\n            console.log(error.response.status)\r\n            // commit('SET_CRAWLERDATA', null);\r\n            if (error.response.status != 400) {\r\n                let error_message = error.response.status+\" \"+error.response.statusText\r\n                commit('SET_OTHER_ERRORS',error_message)\r\n            }\r\n        }\r\n        else\r\n        {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n        }\r\n        \r\n        \r\n        commit('DELETING_CRAWLER_LOADING', false)\r\n    })\r\n    \r\n}\r\n\r\n// Crawler Details\r\nexport const getCrawlerDetailsApi = ({ commit })=> {\r\n    commit('CLEAR_OTHER_ERRORS')\r\n    commit('CRAWLER_DETAILS_LOADING', true)\r\n    Crawler.getCrawlerDetails().then(response => {\r\n        commit('SET_CRAWLER_DETAILS', response.data)\r\n        commit('CRAWLER_DETAILS_LOADING', false)\r\n        // router.push({ name: 'crawlers_list' });\r\n        }).catch((error) => {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n            commit('CRAWLER_DETAILS_LOADING',false);\r\n    })\r\n    .catch((error) => {\r\n        if(error.response != undefined)\r\n        {\r\n            let error_data = error.response.data\r\n            console.log(error.response.status)\r\n            // commit('SET_CRAWLERDATA', null);\r\n            if (error.response.status != 400) {\r\n                let error_message = error.response.status+\" \"+error.response.statusText\r\n                commit('SET_OTHER_ERRORS',error_message)\r\n            }\r\n        }\r\n        else\r\n        {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n        }\r\n        \r\n        \r\n        commit('CRAWLER_DETAILS_LOADING', false)\r\n    })\r\n    \r\n}\r\n\r\n// Crawler logfile\r\nexport const getLogfile = ({ commit }, form)=> {\r\n    commit('CLEAR_OTHER_ERRORS')\r\n    Scrapyd.getLogfile(form).then(response => {\r\n        // console.log(response.data)\r\n        \r\n        commit('SET_CRAWLER_LOGFILE', response.data)\r\n        // commit('CRAWLER_DETAILS_LOADING', false)\r\n        // router.push({ name: 'crawlers_list' });\r\n        }).catch((error) => {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n            commit('CRAWLER_DETAILS_LOADING',false);\r\n    })\r\n    .catch((error) => {\r\n        if(error.response != undefined)\r\n        {\r\n            let error_data = error.response.data\r\n            console.log(error.response.status)\r\n            // commit('SET_CRAWLER_LOGFILE', '')\r\n            // commit('SET_CRAWLERDATA', null);\r\n            if (error.response.status != 400) {\r\n                let error_message = error.response.status+\" \"+error.response.statusText\r\n                commit('SET_OTHER_ERRORS',error_message)\r\n            }\r\n        }\r\n        else\r\n        {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n        }\r\n        \r\n        \r\n        // commit('CRAWLER_DETAILS_LOADING', false)\r\n    })\r\n    \r\n}\r\n\r\n// get products Data\r\nexport const getProductsData = ({ commit })=> {\r\n    commit('CLEAR_OTHER_ERRORS')\r\n    commit('SET_LOADING_PRODUCTS_DATA', true)\r\n    Crawler.getProductsData().then(response => {\r\n        console.log(\"PRODUCTS DATA\")\r\n        commit('SET_LOADING_PRODUCTS_DATA', false)\r\n        commit('SET_PRODUCTS_DATA', response.data)\r\n        // commit('CRAWLER_DETAILS_LOADING', false)\r\n        // router.push({ name: 'crawlers_list' });\r\n        }).catch((error) => {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n            commit('SET_LOADING_PRODUCTS_DATA', false)\r\n    })\r\n    .catch((error) => {\r\n        if(error.response != undefined)\r\n        {\r\n            let error_data = error.response.data\r\n            console.log(error.response.status)\r\n            // commit('SET_CRAWLER_LOGFILE', '')\r\n            // commit('SET_CRAWLERDATA', null);\r\n            if (error.response.status != 400) {\r\n                let error_message = error.response.status+\" \"+error.response.statusText\r\n                commit('SET_OTHER_ERRORS',error_message)\r\n            }\r\n        }\r\n        else\r\n        {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n        }\r\n        \r\n        commit('SET_LOADING_PRODUCTS_DATA', false)\r\n        // commit('CRAWLER_DETAILS_LOADING', false)\r\n    })\r\n    \r\n}\r\n\r\nexport const dropProductsData = ({ commit }, vm)=> {\r\n    commit('CLEAR_OTHER_ERRORS')\r\n    commit('SET_LOADING_PRODUCTS_DROP', true)\r\n    Crawler.dropProductsData().then(response => {\r\n        console.log(\"PRODUCTS DROP\")\r\n        commit('SET_PRODUCTS_DATA', [])\r\n        commit('SET_LOADING_PRODUCTS_DROP', false)\r\n        vm.dropProductsDataAlert = true\r\n        vm.dropProductsDataAlertMessage = response.data.message\r\n        vm.dropProductsDataAlertIcon = 'mdi-database-check'\r\n        // commit('CRAWLER_DETAILS_LOADING', false)\r\n        router.push({ name: 'crawlers_list' });\r\n        }).catch((error) => {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n            commit('SET_LOADING_PRODUCTS_DROP', false)\r\n    })\r\n    .catch((error) => {\r\n        if(error.response != undefined)\r\n        {\r\n            let error_data = error.response.data\r\n            console.log(error.response.status)\r\n            // commit('SET_CRAWLER_LOGFILE', '')\r\n            // commit('SET_CRAWLERDATA', null);\r\n            if (error.response.status != 400) {\r\n                let error_message = error.response.status+\" \"+error.response.statusText\r\n                commit('SET_OTHER_ERRORS',error_message)\r\n            }\r\n        }\r\n        else\r\n        {\r\n            error = error+\". Can't connect to the server.\"\r\n            commit('SET_OTHER_ERRORS',error)\r\n        }\r\n        \r\n        commit('SET_LOADING_PRODUCTS_DROP', false)\r\n        // commit('CRAWLER_DETAILS_LOADING', false)\r\n    })\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}]}