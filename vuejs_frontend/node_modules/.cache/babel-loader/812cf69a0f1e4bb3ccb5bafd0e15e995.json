{"remainingRequest":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/babel-loader/lib/index.js!/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/src/components/CrawlersList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/src/components/CrawlersList.vue","mtime":1631743770740},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["CrawlersList.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n   <v-app id=\"inspire\">\n      <v-main>\n        <v-card>\n          <v-card-title>\n            Crawlers List\n            <!-- {{getRunningCrawlerTaskId['task_id']}} -->\n            <v-spacer></v-spacer>\n            <v-text-field\n              v-model=\"search\"\n              append-icon=\"mdi-magnify\"\n              label=\"Search\"\n              single-line\n              hide-details\n            ></v-text-field>\n          </v-card-title>\n          <v-data-table\n            :headers=\"headers\"\n            :items=\"getCrawlers\"\n            :search=\"search\"\n            class=\"elevation-1\"\n            :loading=\"isLoading\"\n            loading-text=\"Loading... Please wait\">\n            <template v-slot:item.name=\"{ item }\">\n              <b>{{item.name}}</b>\n            </template>\n            <template v-slot:item.start_url=\"{ item }\">\n              <a :href=\"item.start_url\" target=\"_blank\">{{item.start_url}}</a>\n            </template>\n            <template v-slot:item.state=\"{ item }\">\n                <span v-if=\"getCrawlerInfo(item.task_id) != null && crawlerButtonControlSwitch(item.task_id) \">\n                  <!-- {{ getJobState }} -->\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    v-if=\"getJobState == 'pending'\"\n                  >\n                  <v-icon left small>\n                    mdi-cog-sync\n                  </v-icon>\n                    {{getJobState}}\n                  </v-chip>\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"red\"\n                    text-color=\"white\"\n                    v-else-if=\"getJobState == 'running'\"\n                  >\n                    <span style=\"margin: 3px\">\n                      <i  class=\"fas fa-cog fa-spin\" style=\"color:white\"></i>\n                    </span>\n                      {{getJobState}}\n                  </v-chip>\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"green\"\n                    text-color=\"white\"\n                    v-else-if=\"getJobState == 'finished'\"\n                  >\n                  <v-icon left small>\n                    mdi-check-all\n                  </v-icon>\n                  {{getJobState}}\n                  </v-chip>\n                </span>\n                <span v-else-if=\"getCrawlerInfo(item.task_id) != null\">\n                  <!-- {{getCrawlerInfo(item.task_id).state}} -->\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    v-if=\"getCrawlerInfo(item.task_id).state == 'pending'\"\n                  >\n                    {{getCrawlerInfo(item.task_id).state}}\n                  </v-chip>\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"red\"\n                    text-color=\"white\"\n                    v-else-if=\"getCrawlerInfo(item.task_id).state == 'running'\"\n                  >\n                    <span style=\"margin: 3px\">\n                      <i class=\"fas fa-cog fa-spin\" style=\"color:white\"></i>\n                    </span>\n                    {{getCrawlerInfo(item.task_id).state}}\n                  </v-chip>\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"green\"\n                    text-color=\"white\"\n                    v-else-if=\"getCrawlerInfo(item.task_id).state == 'finished'\"\n                  >\n                  <v-icon left small>\n                    mdi-check-all\n                  </v-icon>\n                  {{getCrawlerInfo(item.task_id).state}}\n                  </v-chip>\n                </span>\n                <span v-else><v-icon small>mdi-check-outline</v-icon></span>\n            </template>\n            <template v-slot:item.task_id=\"{ item }\">\n                <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"orange\"\n                    text-color=\"white\"\n                    v-if=\"item.task_id == 'New Crawler'\"\n                  >\n                  <v-icon left small>\n                    mdi-alert-decagram\n                  </v-icon>\n                  {{item.task_id}}\n                  </v-chip>\n                  <span v-else>{{item.task_id}}</span>\n            </template>\n              <template v-slot:item.btn_run_stop=\"{ item }\">\n                <v-btn\n                  icon\n                  v-if=\"crawlerButtonControlSwitch(item.task_id) && getJobState != 'finished'\"\n                  :disabled=\"getLoadingRunningCrawlerExecution || stoppingCrawler\"\n                  v-on:click=\"exitRunningJob(item.task_id)\"\n                  color=\"black\">\n                  <v-icon>mdi-close-circle-outline</v-icon>\n                </v-btn>\n                <v-btn\n                  icon\n                  v-else\n                  :disabled=\"getLoadingRunningCrawlerExecution || getJobState != 'finished' || stoppingCrawler || getDeletingCrawlerLoading\"\n                  v-on:click=\"executeCrawler(item.crawlerId)\"\n                  color=\"black\">\n                  <v-icon>mdi-play</v-icon>\n                </v-btn>\n                <!-- <span>{{item.crawlerId}}</span> -->\n              </template>\n              <template v-slot:item.btn_delete=\"{ item }\">\n                <v-btn\n                  icon\n                  :disabled=\"getLoadingRunningCrawlerExecution || getJobState != 'finished'\"\n                  v-on:click=\"removeCrawler(item.crawlerId)\"\n                  color=\"black\">\n                  <v-icon>mdi-delete</v-icon>\n                </v-btn>\n              </template>\n              <!-- Details btn -->\n              <template v-slot:item.details_btn=\"{ item }\">\n                <v-btn\n                  icon\n                  v-if=\"crawlerButtonControlSwitch(item.task_id) && getJobState != 'finished'\"\n                  :disabled=\"getLoadingRunningCrawlerExecution || stoppingCrawler || !crawlerDetailsReady\"\n                  v-on:click=\"openCrawlerDetails()\"\n                  color=\"black\">\n                  <v-icon>mdi-eye</v-icon>\n                </v-btn>\n              </template>\n            </v-data-table>\n        </v-card>\n        <v-overlay :value=\"stoppingCrawler\">\n          <v-progress-circular\n            indeterminate\n            size=\"64\"\n          ></v-progress-circular>\n        </v-overlay>\n\n        <v-dialog\n          v-model=\"getDeletingCrawlerLoading\"\n          hide-overlay\n          persistent\n          width=\"300\"\n        >\n          <v-card\n            color=\"primary\"\n            dark\n          >\n            <v-card-text>\n              Please stand by\n              <v-progress-linear\n                indeterminate\n                color=\"white\"\n                class=\"mb-0\"\n              ></v-progress-linear>\n            </v-card-text>\n          </v-card>\n        </v-dialog>\n        <v-snackbar\n        ref=\"snackbarDeleteCrawler\"\n        elevation=\"24\"\n        color=\"success\"\n        v-model=\"crawlerAlert\"\n        :timeout=\"crawlerAlertTimeoutMessage\"\n        >\n        <v-icon large>{{crawlerAlertIcon}}</v-icon>\n        <b style=\"font-size:150%; margin-left:5px\">{{ crawlerAlertMessage }}</b>\n        <template v-slot:action=\"{ attrs }\">\n          <v-btn\n            color=\"white\"\n            text\n            v-bind=\"attrs\"\n            @click=\"crawlerAlert = false\"\n          >\n            Close\n          </v-btn>\n        </template>\n    </v-snackbar>\n      </v-main>\n    <crawler-details \n        v-show=\"crawlerDetailsReady\" \n        :percentage=\"productsInsertedPercentage\" \n        :openDialog=\"triggerOpenCrawlerDetails\" \n        :activeCrawlerDetails=\"getCrawlerDetails\"\n        :jobState=\"getJobState\"\n        :crawlertimeCounter=\"timeCounter\"\n        @update-openDialog=\"updateDialog\"\n    ></crawler-details>\n   </v-app>\n</template>\n\n\n<script>\nimport {mapActions,mapGetters, mapState} from \"vuex\"\nimport CrawlerDetails from './CrawlerDetails.vue';\n  export default {\n  components: { CrawlerDetails },\n\n    name: 'CrawlersList',\n    props: {\n      refreshCrawlerListData: false\n    },\n    \n    data () {\n      return {\n        search: '',\n        inProcess: true,\n        startLongPolling:false,\n        polling: null,\n        stoppingCrawler: false,\n        crawlerAlert: false,\n        crawlerAlertTimeoutMessage: 5000,\n        crawlerAlertMessage: '',\n        crawlerAlertIcon: '',\n        triggerOpenCrawlerDetails: false,\n        totalProductsFound: 0,\n        lastCrawler: {},\n        lastCrawlerTaskId: null,\n        crawlerDetailsReady: false,\n        productsInsertedPercentage:0,\n        timeCounter: '',\n        job_id : null,\n        crawlerInProcess:{\n          project: 'default',\n          job: ''\n        },\n        headers: [\n          {\n            text: 'Crawler Name',\n            align: 'start',\n            value: 'name',\n          },\n          { text: 'Start URL', value: 'start_url', sortable: false },\n          { text: 'State', value: 'state', sortable: false },\n          { text: 'Unique ID', value: 'task_id', sortable: false},\n          { text: ' ', value: 'btn_run_stop', sortable: false },\n          { text: ' ', value: 'btn_delete', sortable: false },\n          { text: ' ', value: 'details_btn', sortable: false },\n        ],\n        // crawlers_data: getCrawlers\n      }\n    },\n\n    mounted () {\n      this.getJobState\n      this.getCrawlersData();\n    },\n\n    watch: {\n      getFullPath () {\n        this.getCrawlersData()\n      },\n\n      refreshCrawlerListData(){\n        // this.getCrawlersData()\n        location.reload();\n      },  \n\n      getJobState(newVal, oldVal){\n          // console.log(\"OLD: \"+oldVal)\n          // console.log(\"NEW: \"+newVal)\n          console.log(\"POLLING!!!!!!!!\")\n          this.pollingFreshCrawlersInfo()\n      },\n\n      getLastCrawlerTaskId(newVal, oldVal){\n          console.log(\"OLD: \"+oldVal)\n          console.log(\"NEW: \"+newVal)\n          if(oldVal != undefined){\n            console.log(\"-->READY\")\n            this.crawlerDetailsReady = true\n            console.log(this.getCrawlerDetails.estimatred_count_down_date)\n            \n          }\n      },\n      \n      getCrawlerProductsInserted(newVal, oldVal){\n        console.log(\"OLD: \"+oldVal)\n        console.log(\"NEW: \"+newVal)\n        this.productsInsertedPercentage = this.calculatePercentage(newVal, this.getCrawlerDetails.number_of_products_found)\n        console.log(\"PERCENTAGE -------> \"+this.productsInsertedPercentage)\n      }\n\n    },\n\n    computed: {\n      ...mapGetters(\"Auth\",[\"isAuth\"]),\n      ...mapGetters(\"Crawler\",[\"getCrawlers\"]),\n      ...mapGetters(\"Crawler\",[\"isLoading\"]),\n      ...mapGetters(\"Crawler\",[\"getLoadingRunningCrawlerExecution\"]),\n      ...mapGetters(\"Crawler\",[\"getRunningCrawler\"]),\n      ...mapGetters(\"Crawler\",[\"getRunningCrawlerTaskId\"]),\n      ...mapGetters(\"Crawler\",[\"getJob\"]),\n      ...mapGetters(\"Crawler\",[\"getFinishedJobs\"]),\n      ...mapGetters(\"Crawler\",[\"getJobState\"]),\n      ...mapGetters(\"Crawler\",[\"getDeletingCrawlerLoading\"]),\n      ...mapGetters(\"Crawler\",[\"getCrawlerDetails\"]),\n      ...mapState(\"Crawler\",[\"crawler_details\"]),\n      ...mapState(\"Crawler\",[\"running_crawler_task_id\"]),\n      \n\n      getFullPath () {\n        return this.$route.path\n      },\n\n      getLastCrawlerTaskId(){\n        console.log('******')\n        return this.crawler_details.task_id\n      },\n\n      getCrawlerProductsInserted(){\n        try {\n          return this.getCrawlerDetails.products_inserted\n        } catch (error) {}\n      }\n\n      \n\n      \n    },\n    \n    methods:{\n        ...mapActions('Crawler',['getAllCrawlers']),\n        ...mapActions('Crawler',['runCrawler']),\n        ...mapActions('Crawler',['getJobs']),\n        ...mapActions('Crawler',['cancelRunningJob']),\n        ...mapActions('Crawler',['getRuningJobs']),\n        ...mapActions('Crawler',['deleteCrawler']),\n        ...mapActions('Crawler',['getCrawlerDetailsApi']),\n\n        updateDialog(openDialog){\n          this.triggerOpenCrawlerDetails = openDialog\n        },\n\n        getCrawlersData(){\n          this.getAllCrawlers(this.crawlerInProcess)\n        },\n\n\n        executeCrawler(id){\n          let playload = {'id': id, 'form': this.crawlerInProcess}\n          console.log(playload)\n          this.runCrawler(playload)\n          this.startLongPolling=true\n          this.crawlerAlert = true\n          this.crawlerAlertMessage = \"Crawler started\"\n          this.crawlerAlertIcon = 'mdi-spider'\n          // this.pollingFreshCrawlersInfo()\n        },\n\n        exitRunningJob(taskId){\n          this.crawlerInProcess['job'] = taskId\n          this.stoppingCrawler = true\n          this.cancelRunningJob(this.crawlerInProcess)\n          this.inProcess = false\n          this.timeCounter = ''\n          \n          this.getAllCrawlers(this.crawlerInProcess)\n        },\n\n        removeCrawler(crawlerId){\n          let playload = {}\n          playload['crawler_id'] = crawlerId\n          playload['crawlerInProcess'] = this.crawlerInProcess\n          playload['vm'] = this\n          this.deleteCrawler(playload)\n        },\n\n        getCrawlerInfo (task_id){\n          let jobs = this.getJob\n          let finished_jobs = this.getFinishedJobs\n          let crawler = null\n          if(jobs.length > 0){\n              crawler = jobs.find(o => o.id === task_id);\n              if(crawler == null && finished_jobs.length > 0){\n                  crawler = finished_jobs.find(o => o.id === task_id);\n              }\n          }\n          else if(finished_jobs.length > 0){\n              crawler = finished_jobs.find(o => o.id === task_id);\n          }\n\n          return crawler\n        },\n\n        crawlerButtonControlSwitch(task_id){\n          let isActive = this.getCrawlerInfo(task_id) ? this.getCrawlerInfo(task_id).isActive : false\n          \n          return isActive\n        },\n\n        openCrawlerDetails(){\n          this.triggerOpenCrawlerDetails = true\n          this.timeCountDown(this.getCrawlerDetails.estimatred_count_down_date)\n        },\n\n        calculatePercentage(value, total){\n          return Math.ceil((value/total) * 100)\n        },\n\n        pollingFreshCrawlersInfo(){\n          // console.log(this.activateLongPolling)\n            var interval = setInterval(\n              function () { \n                console.log(\"LongPolling--->\"+this.getJobState)\n                this.getAllCrawlers(this.crawlerInProcess)\n\n                this.getCrawlerDetailsApi()\n                  if(this.getLastCrawlerTaskId == this.getJob[0].id){\n                    this.crawlerDetailsReady = true\n                  }\n                  else{\n                    this.crawlerDetailsReady = false\n                  }\n                  \n             \n                if(this.getJobState == 'finished' || !this.isAuth){\n                  console.log(\"STOP POLLING!!\")\n                  clearInterval(interval);\n                  if(this.isAuth){\n                    let n_audio = new Audio('https://freesound.org/data/previews/320/320655_5260872-lq.mp3');\n                    n_audio.play();\n                  }\n                  this.stoppingCrawler = false\n                  this.crawlerDetailsReady = false\n                  this.crawlerAlert = true\n                  this.crawlerAlertMessage = \"Crawler finished\"\n                  this.crawlerAlertIcon = 'mdi-spider'\n                  // clearInterval(this.$store.getters['Crawler/getPollingInterval'])\n                }\n              }\n              .bind(this), 3000)\n            // this.polling = interval\n        },\n\n        timeCountDown(time){\n        // try {\n            let countDownDate = new Date(time).getTime();\n\n            // Run myfunc every second\n            let myfunc = setInterval(function() {\n\n            let now = new Date().getTime();\n            let timeleft = countDownDate - now;\n                \n            // Calculating the days, hours, minutes and seconds left\n            let days = Math.floor(timeleft / (1000 * 60 * 60 * 24));\n            let hours = Math.floor((timeleft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n            let minutes = Math.floor((timeleft % (1000 * 60 * 60)) / (1000 * 60));\n            let seconds = Math.floor((timeleft % (1000 * 60)) / 1000);\n                \n            this.timeCounter = days+\":\"+hours+\":\"+minutes+\":\"+seconds\n            console.log(this.timeCounter)\n            console.log(\"TIMMMME\")\n            // Display the message when countdown is over\n            if (timeleft < 0 || this.getJobState == 'finished') {\n              this.timeCounter = ''\n              clearInterval(myfunc);\n                  console.log(\"TIME UP\")\n              }\n            }\n            .bind(this), 1000);\n        // }\n          // catch (error) {}\n        },\n\n    },\n\n    // beforeDestroy () {\n    //   clearInterval(this.polling)\n    // },\n\n    created () {\n      this.getCrawlerDetailsApi()\n      // let _lastCrawler = this.getCrawlerDetails.task_id\n      // // this.lastCrawlerTaskId = _lastCrawler['task_id']\n      //   console.log(\"crawlerDetailsTaskId===>\")\n      //   console.log(_lastCrawler)\n      if(this.getJobState != 'finished'){\n        \n        this.pollingFreshCrawlersInfo()\n      }\n\n      \n    }\n    \n  }\n</script>"],"sourceRoot":"src/components"}]}