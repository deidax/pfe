{"remainingRequest":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/babel-loader/lib/index.js!/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/src/components/CrawlersList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/src/components/CrawlersList.vue","mtime":1631450747856},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/khalil/Projects/PFE/scrapy_app/vuejs_frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["CrawlersList.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n   <v-app id=\"inspire\">\n      <v-main>\n        <v-card>\n          <v-card-title>\n            Crawlers List\n            <!-- {{getRunningCrawlerTaskId['task_id']}} -->\n            <v-spacer></v-spacer>\n            <v-text-field\n              v-model=\"search\"\n              append-icon=\"mdi-magnify\"\n              label=\"Search\"\n              single-line\n              hide-details\n            ></v-text-field>\n          </v-card-title>\n          <v-data-table\n            :headers=\"headers\"\n            :items=\"getCrawlers\"\n            :search=\"search\"\n            class=\"elevation-1\"\n            :loading=\"isLoading\"\n            loading-text=\"Loading... Please wait\">\n            <template v-slot:item.name=\"{ item }\">\n              <b>{{item.name}}</b>\n            </template>\n            <template v-slot:item.start_url=\"{ item }\">\n              <a :href=\"item.start_url\" target=\"_blank\">{{item.start_url}}</a>\n            </template>\n            <template v-slot:item.state=\"{ item }\">\n                <span v-if=\"getCrawlerInfo(item.task_id) != null && crawlerButtonControlSwitch(item.task_id) \">\n                  <!-- {{ getJobState }} -->\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    v-if=\"getJobState == 'pending'\"\n                  >\n                  <v-icon left small>\n                    mdi-cog-sync\n                  </v-icon>\n                    {{getJobState}}\n                  </v-chip>\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"red\"\n                    text-color=\"white\"\n                    v-else-if=\"getJobState == 'running'\"\n                  >\n                    <span style=\"margin: 3px\">\n                      <i  class=\"fas fa-cog fa-spin\" style=\"color:white\"></i>\n                    </span>\n                      {{getJobState}}\n                  </v-chip>\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"green\"\n                    text-color=\"white\"\n                    v-else-if=\"getJobState == 'finished'\"\n                  >\n                  <v-icon left small>\n                    mdi-check-all\n                  </v-icon>\n                  {{getJobState}}\n                  </v-chip>\n                </span>\n                <span v-else-if=\"getCrawlerInfo(item.task_id) != null\">\n                  <!-- {{getCrawlerInfo(item.task_id).state}} -->\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    v-if=\"getCrawlerInfo(item.task_id).state == 'pending'\"\n                  >\n                    {{getCrawlerInfo(item.task_id).state}}\n                  </v-chip>\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"red\"\n                    text-color=\"white\"\n                    v-else-if=\"getCrawlerInfo(item.task_id).state == 'running'\"\n                  >\n                    <span style=\"margin: 3px\">\n                      <i class=\"fas fa-cog fa-spin\" style=\"color:white\"></i>\n                    </span>\n                    {{getCrawlerInfo(item.task_id).state}}\n                  </v-chip>\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"green\"\n                    text-color=\"white\"\n                    v-else-if=\"getCrawlerInfo(item.task_id).state == 'finished'\"\n                  >\n                  <v-icon left small>\n                    mdi-check-all\n                  </v-icon>\n                  {{getCrawlerInfo(item.task_id).state}}\n                  </v-chip>\n                </span>\n                <span v-else><v-icon small>mdi-check-outline</v-icon></span>\n            </template>\n            <template v-slot:item.task_id=\"{ item }\">\n                <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"orange\"\n                    text-color=\"white\"\n                    v-if=\"item.task_id == 'New Crawler'\"\n                  >\n                  <v-icon left small>\n                    mdi-alert-decagram\n                  </v-icon>\n                  {{item.task_id}}\n                  </v-chip>\n                  <span v-else>{{item.task_id}}</span>\n            </template>\n              <template v-slot:item.btn_run_stop=\"{ item }\">\n                <v-btn\n                  icon\n                  v-if=\"crawlerButtonControlSwitch(item.task_id) && getJobState != 'finished'\"\n                  :disabled=\"getLoadingRunningCrawlerExecution || stoppingCrawler\"\n                  v-on:click=\"exitRunningJob(item.task_id)\"\n                  color=\"black\">\n                  <v-icon>mdi-close-circle-outline</v-icon>\n                </v-btn>\n                <v-btn\n                  icon\n                  v-else\n                  :disabled=\"getLoadingRunningCrawlerExecution || getJobState != 'finished' || stoppingCrawler || getDeletingCrawlerLoading\"\n                  v-on:click=\"executeCrawler(item.crawlerId)\"\n                  color=\"black\">\n                  <v-icon>mdi-play</v-icon>\n                </v-btn>\n                <!-- <span>{{item.crawlerId}}</span> -->\n              </template>\n              <template v-slot:item.btn_delete=\"{ item }\">\n                <v-btn\n                  icon\n                  :disabled=\"getLoadingRunningCrawlerExecution || getJobState != 'finished'\"\n                  v-on:click=\"removeCrawler(item.crawlerId)\"\n                  color=\"black\">\n                  <v-icon>mdi-delete</v-icon>\n                </v-btn>\n              </template>\n            </v-data-table>\n        </v-card>\n        <v-overlay :value=\"stoppingCrawler\">\n          <v-progress-circular\n            indeterminate\n            size=\"64\"\n          ></v-progress-circular>\n        </v-overlay>\n\n        <v-dialog\n          v-model=\"getDeletingCrawlerLoading\"\n          hide-overlay\n          persistent\n          width=\"300\"\n        >\n          <v-card\n            color=\"primary\"\n            dark\n          >\n            <v-card-text>\n              Please stand by\n              <v-progress-linear\n                indeterminate\n                color=\"white\"\n                class=\"mb-0\"\n              ></v-progress-linear>\n            </v-card-text>\n          </v-card>\n        </v-dialog>\n        <v-snackbar\n        ref=\"snackbarDeleteCrawler\"\n        elevation=\"24\"\n        color=\"success\"\n        v-model=\"crawlerAlert\"\n        :timeout=\"crawlerAlertTimeoutMessage\"\n        >\n        <v-icon large>{{crawlerAlertIcon}}</v-icon>\n        <b style=\"font-size:150%; margin-left:5px\">{{ crawlerAlertMessage }}</b>\n        <template v-slot:action=\"{ attrs }\">\n          <v-btn\n            color=\"white\"\n            text\n            v-bind=\"attrs\"\n            @click=\"crawlerAlert = false\"\n          >\n            Close\n          </v-btn>\n        </template>\n    </v-snackbar>\n      </v-main>\n   </v-app>\n</template>\n\n\n<script>\nimport {mapActions,mapGetters} from \"vuex\"\n  export default {\n\n    name: 'CrawlersList',\n    \n    data () {\n      return {\n        search: '',\n        inProcess: true,\n        startLongPolling:false,\n        polling: null,\n        stoppingCrawler: false,\n        crawlerAlert: false,\n        crawlerAlertTimeoutMessage: 5000,\n        crawlerAlertMessage: '',\n        crawlerAlertIcon: '',\n        crawlerInProcess:{\n          project: 'default',\n          job: ''\n        },\n        headers: [\n          {\n            text: 'Crawler Name',\n            align: 'start',\n            value: 'name',\n          },\n          { text: 'Start URL', value: 'start_url', sortable: false },\n          { text: 'State', value: 'state', sortable: false },\n          { text: 'Unique ID', value: 'task_id', sortable: false},\n          { text: ' ', value: 'btn_run_stop', sortable: false },\n          { text: ' ', value: 'btn_delete', sortable: false },\n        ],\n        // crawlers_data: getCrawlers\n      }\n    },\n\n    mounted () {\n      this.getCrawlersData();\n    },\n\n    watch: {\n      getFullPath () {\n        this.getCrawlersData()\n      },\n\n      // startLongPolling () {\n      //   console.log(\"LongPolling\")\n      //   this.pollingFreshCrawlersInfo()\n      // },\n\n      getJobState(newVal, oldVal){\n          console.log(\"OLD: \"+oldVal)\n          console.log(\"NEW: \"+newVal)\n          console.log(\"POLLING!!!!!!!!\")\n          this.pollingFreshCrawlersInfo()\n      }\n\n    },\n\n    computed: {\n      ...mapGetters(\"Auth\",[\"isAuth\"]),\n      ...mapGetters(\"Crawler\",[\"getCrawlers\"]),\n      ...mapGetters(\"Crawler\",[\"isLoading\"]),\n      ...mapGetters(\"Crawler\",[\"getLoadingRunningCrawlerExecution\"]),\n      ...mapGetters(\"Crawler\",[\"getRunningCrawler\"]),\n      ...mapGetters(\"Crawler\",[\"getRunningCrawlerTaskId\"]),\n      ...mapGetters(\"Crawler\",[\"getJob\"]),\n      ...mapGetters(\"Crawler\",[\"getFinishedJobs\"]),\n      ...mapGetters(\"Crawler\",[\"getJobState\"]),\n      ...mapGetters(\"Crawler\",[\"getDeletingCrawlerLoading\"]),\n      \n\n      getFullPath () {\n        return this.$route.path\n      },\n\n      // activateLongPolling(){\n      //   console.log(this.getJobState)\n      //   return this.startLongPolling && this.getJobState != 'finished'\n      // }\n\n      \n\n      \n    },\n\n    methods:{\n        ...mapActions('Crawler',['getAllCrawlers']),\n        ...mapActions('Crawler',['runCrawler']),\n        ...mapActions('Crawler',['getJobs']),\n        ...mapActions('Crawler',['cancelRunningJob']),\n        ...mapActions('Crawler',['getRuningJobs']),\n        ...mapActions('Crawler',['deleteCrawler']),\n\n        getCrawlersData(){\n          this.getAllCrawlers(this.crawlerInProcess)\n        },\n\n\n        executeCrawler(id){\n          let playload = {'id': id, 'form': this.crawlerInProcess}\n          console.log(playload)\n          this.runCrawler(playload)\n          this.startLongPolling=true\n          this.crawlerAlert = true\n          this.crawlerAlertMessage = \"Crawler started\"\n          this.crawlerAlertIcon = 'mdi-spider'\n          // this.pollingFreshCrawlersInfo()\n        },\n\n        exitRunningJob(taskId){\n          this.crawlerInProcess['job'] = taskId\n          this.stoppingCrawler = true\n          this.cancelRunningJob(this.crawlerInProcess)\n          this.inProcess = false\n          this.getAllCrawlers(this.crawlerInProcess)\n        },\n\n        removeCrawler(crawlerId){\n          let playload = {}\n          playload['crawler_id'] = crawlerId\n          playload['crawlerInProcess'] = this.crawlerInProcess\n          playload['vm'] = this\n          this.deleteCrawler(playload)\n        },\n\n        getCrawlerInfo (task_id){\n          let jobs = this.getJob\n          let finished_jobs = this.getFinishedJobs\n          let crawler = null\n          if(jobs.length > 0){\n              crawler = jobs.find(o => o.id === task_id);\n              if(crawler == null && finished_jobs.length > 0){\n                  crawler = finished_jobs.find(o => o.id === task_id);\n              }\n          }\n          else if(finished_jobs.length > 0){\n              crawler = finished_jobs.find(o => o.id === task_id);\n          }\n\n          return crawler\n        },\n\n        crawlerButtonControlSwitch(task_id){\n          let isActive = this.getCrawlerInfo(task_id) ? this.getCrawlerInfo(task_id).isActive : false\n          \n          return isActive\n        },\n\n        pollingFreshCrawlersInfo(){\n          // console.log(this.activateLongPolling)\n            var interval = setInterval(\n              function () { \n                console.log(\"LongPolling--->\"+this.getJobState)\n                this.getAllCrawlers(this.crawlerInProcess)\n                console.log('interval--->'+ this.isAuth)\n                // this.$store.commit('Crawler/SET_POLLING_INTERVAL', interval)\n                if(this.getJobState == 'finished' || !this.isAuth){\n                  console.log(\"STOP POLLING!!\")\n                  clearInterval(interval);\n                  this.stoppingCrawler = false\n                  this.crawlerAlert = true\n                  this.crawlerAlertMessage = \"Crawler finished\"\n                  this.crawlerAlertIcon = 'mdi-spider'\n                  // clearInterval(this.$store.getters['Crawler/getPollingInterval'])\n                }\n              }\n              .bind(this), 3000)\n            // this.polling = interval\n        }\n\n    },\n\n    // beforeDestroy () {\n    //   clearInterval(this.polling)\n    // },\n\n    created () {\n      if(this.getJobState != 'finished'){\n        console.log(\"created===>\")\n        this.pollingFreshCrawlersInfo()\n      }\n    }\n    \n  }\n</script>\n"],"sourceRoot":"src/components"}]}